// megafunction wizard: %ALTFP_DIV%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: altfp_div 

// ============================================================
// File Name: altfp_divider.v
// Megafunction Name(s):
// 			altfp_div
//
// Simulation Library Files(s):
// 			
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 18.1.0 Build 625 09/12/2018 SJ Lite Edition
// ************************************************************


//Copyright (C) 2018  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details.


//altfp_div DENORMAL_SUPPORT="NO" DEVICE_FAMILY="Cyclone V" OPTIMIZE="SPEED" PIPELINE=14 REDUCED_FUNCTIONALITY="NO" WIDTH_EXP=8 WIDTH_MAN=23 clock dataa datab result
//VERSION_BEGIN 18.1 cbx_altbarrel_shift 2018:09:12:13:04:24:SJ cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altfp_div 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_abs 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_divide 2018:09:12:13:04:24:SJ cbx_lpm_mult 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//altfp_div_pst DEVICE_FAMILY="Cyclone V" FILE_NAME="altfp_divider_syn.v:a" PIPELINE=14 WIDTH_EXP=8 WIDTH_MAN=23 aclr clk_en clock dataa datab result
//VERSION_BEGIN 18.1 cbx_altbarrel_shift 2018:09:12:13:04:24:SJ cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altfp_div 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_abs 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_divide 2018:09:12:13:04:24:SJ cbx_lpm_mult 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


//altsyncram DEVICE_FAMILY="Cyclone V" INIT_FILE="altfp_divider_syn.hex" OPERATION_MODE="ROM" WIDTH_A=9 WIDTHAD_A=9 address_a clock0 clocken0 q_a
//VERSION_BEGIN 18.1 cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = M10K 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"OPTIMIZE_POWER_DURING_SYNTHESIS=NORMAL_COMPILATION"} *)
module  altfp_divider_altsyncram
	( 
	address_a,
	clock0,
	clocken0,
	q_a) /* synthesis synthesis_clearbox=1 */;
	input   [8:0]  address_a;
	input   clock0;
	input   clocken0;
	output   [8:0]  q_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clock0;
	tri1   clocken0;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_ram_block4a_0portadataout;
	wire  [0:0]   wire_ram_block4a_1portadataout;
	wire  [0:0]   wire_ram_block4a_2portadataout;
	wire  [0:0]   wire_ram_block4a_3portadataout;
	wire  [0:0]   wire_ram_block4a_4portadataout;
	wire  [0:0]   wire_ram_block4a_5portadataout;
	wire  [0:0]   wire_ram_block4a_6portadataout;
	wire  [0:0]   wire_ram_block4a_7portadataout;
	wire  [0:0]   wire_ram_block4a_8portadataout;
	wire  [8:0]  address_a_wire;

	cyclonev_ram_block   ram_block4a_0
	( 
	.clk0(clock0),
	.dftout(),
	.eccstatus(),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_0portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1),
	.nerror(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_0.clk0_core_clock_enable = "ena0",
		ram_block4a_0.clk0_input_clock_enable = "ena0",
		ram_block4a_0.connectivity_checking = "OFF",
		ram_block4a_0.init_file = "altfp_divider_syn.hex",
		ram_block4a_0.init_file_layout = "port_a",
		ram_block4a_0.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_0.mem_init0 = 512'h333333336664CD99326CD93649B249B6DB6DB6D24B692D2D2D694A52B5AB56A954AAB5555555555552AA55AB52B4A5A5B49249B264CCCCCE639C70E1F07F0000,
		ram_block4a_0.operation_mode = "rom",
		ram_block4a_0.port_a_address_width = 9,
		ram_block4a_0.port_a_data_out_clear = "none",
		ram_block4a_0.port_a_data_out_clock = "none",
		ram_block4a_0.port_a_data_width = 1,
		ram_block4a_0.port_a_first_address = 0,
		ram_block4a_0.port_a_first_bit_number = 0,
		ram_block4a_0.port_a_last_address = 511,
		ram_block4a_0.port_a_logical_ram_depth = 512,
		ram_block4a_0.port_a_logical_ram_width = 9,
		ram_block4a_0.ram_block_type = "AUTO",
		ram_block4a_0.lpm_type = "cyclonev_ram_block";
	cyclonev_ram_block   ram_block4a_1
	( 
	.clk0(clock0),
	.dftout(),
	.eccstatus(),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_1portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1),
	.nerror(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_1.clk0_core_clock_enable = "ena0",
		ram_block4a_1.clk0_input_clock_enable = "ena0",
		ram_block4a_1.connectivity_checking = "OFF",
		ram_block4a_1.init_file = "altfp_divider_syn.hex",
		ram_block4a_1.init_file_layout = "port_a",
		ram_block4a_1.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_1.mem_init0 = 512'h0F0F0F0F1E1C3C78F1E3C70E3871C78E38E38E31C718E31CE318C6318C673198CC667333333333333666CC99366D936C92492496D25A5A5AD6B52A54AAD55555,
		ram_block4a_1.operation_mode = "rom",
		ram_block4a_1.port_a_address_width = 9,
		ram_block4a_1.port_a_data_out_clear = "none",
		ram_block4a_1.port_a_data_out_clock = "none",
		ram_block4a_1.port_a_data_width = 1,
		ram_block4a_1.port_a_first_address = 0,
		ram_block4a_1.port_a_first_bit_number = 1,
		ram_block4a_1.port_a_last_address = 511,
		ram_block4a_1.port_a_logical_ram_depth = 512,
		ram_block4a_1.port_a_logical_ram_width = 9,
		ram_block4a_1.ram_block_type = "AUTO",
		ram_block4a_1.lpm_type = "cyclonev_ram_block";
	cyclonev_ram_block   ram_block4a_2
	( 
	.clk0(clock0),
	.dftout(),
	.eccstatus(),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_2portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1),
	.nerror(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_2.clk0_core_clock_enable = "ena0",
		ram_block4a_2.clk0_input_clock_enable = "ena0",
		ram_block4a_2.connectivity_checking = "OFF",
		ram_block4a_2.init_file = "altfp_divider_syn.hex",
		ram_block4a_2.init_file_layout = "port_a",
		ram_block4a_2.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_2.mem_init0 = 512'h00FF00FF01FC03F80FE03F01F80FC07E07E07E0FC0F81F03E0F83E0F83E0F0783C1E0F0F0F0F0F0F0E1E3C78F1E38F1C71C71C71CE39C639CE7319CC66333333,
		ram_block4a_2.operation_mode = "rom",
		ram_block4a_2.port_a_address_width = 9,
		ram_block4a_2.port_a_data_out_clear = "none",
		ram_block4a_2.port_a_data_out_clock = "none",
		ram_block4a_2.port_a_data_width = 1,
		ram_block4a_2.port_a_first_address = 0,
		ram_block4a_2.port_a_first_bit_number = 2,
		ram_block4a_2.port_a_last_address = 511,
		ram_block4a_2.port_a_logical_ram_depth = 512,
		ram_block4a_2.port_a_logical_ram_width = 9,
		ram_block4a_2.ram_block_type = "AUTO",
		ram_block4a_2.lpm_type = "cyclonev_ram_block";
	cyclonev_ram_block   ram_block4a_3
	( 
	.clk0(clock0),
	.dftout(),
	.eccstatus(),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_3portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1),
	.nerror(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_3.clk0_core_clock_enable = "ena0",
		ram_block4a_3.clk0_input_clock_enable = "ena0",
		ram_block4a_3.connectivity_checking = "OFF",
		ram_block4a_3.init_file = "altfp_divider_syn.hex",
		ram_block4a_3.init_file_layout = "port_a",
		ram_block4a_3.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_3.mem_init0 = 512'h0000FFFF0003FFF8001FFF0007FFC001FFE001FFC007FF001FF801FF801FF007FC01FF00FF00FF00FE01FC07F01F80FC0FC0FC0FC1F83E07C1F0F83C1E0F0F0F,
		ram_block4a_3.operation_mode = "rom",
		ram_block4a_3.port_a_address_width = 9,
		ram_block4a_3.port_a_data_out_clear = "none",
		ram_block4a_3.port_a_data_out_clock = "none",
		ram_block4a_3.port_a_data_width = 1,
		ram_block4a_3.port_a_first_address = 0,
		ram_block4a_3.port_a_first_bit_number = 3,
		ram_block4a_3.port_a_last_address = 511,
		ram_block4a_3.port_a_logical_ram_depth = 512,
		ram_block4a_3.port_a_logical_ram_width = 9,
		ram_block4a_3.ram_block_type = "AUTO",
		ram_block4a_3.lpm_type = "cyclonev_ram_block";
	cyclonev_ram_block   ram_block4a_4
	( 
	.clk0(clock0),
	.dftout(),
	.eccstatus(),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_4portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1),
	.nerror(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_4.clk0_core_clock_enable = "ena0",
		ram_block4a_4.clk0_input_clock_enable = "ena0",
		ram_block4a_4.connectivity_checking = "OFF",
		ram_block4a_4.init_file = "altfp_divider_syn.hex",
		ram_block4a_4.init_file_layout = "port_a",
		ram_block4a_4.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_4.mem_init0 = 512'h00000000FFFFFFF8000000FFFFFFC000001FFFFFC00000FFFFF800007FFFF00003FFFF0000FFFF0001FFFC000FFF8003FFC003FFC007FE003FF007FC01FF00FF,
		ram_block4a_4.operation_mode = "rom",
		ram_block4a_4.port_a_address_width = 9,
		ram_block4a_4.port_a_data_out_clear = "none",
		ram_block4a_4.port_a_data_out_clock = "none",
		ram_block4a_4.port_a_data_width = 1,
		ram_block4a_4.port_a_first_address = 0,
		ram_block4a_4.port_a_first_bit_number = 4,
		ram_block4a_4.port_a_last_address = 511,
		ram_block4a_4.port_a_logical_ram_depth = 512,
		ram_block4a_4.port_a_logical_ram_width = 9,
		ram_block4a_4.ram_block_type = "AUTO",
		ram_block4a_4.lpm_type = "cyclonev_ram_block";
	cyclonev_ram_block   ram_block4a_5
	( 
	.clk0(clock0),
	.dftout(),
	.eccstatus(),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_5portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1),
	.nerror(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_5.clk0_core_clock_enable = "ena0",
		ram_block4a_5.clk0_input_clock_enable = "ena0",
		ram_block4a_5.connectivity_checking = "OFF",
		ram_block4a_5.init_file = "altfp_divider_syn.hex",
		ram_block4a_5.init_file_layout = "port_a",
		ram_block4a_5.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_5.mem_init0 = 512'h0000000000000007FFFFFFFFFFFFC000000000003FFFFFFFFFF8000000000FFFFFFFFF00000000FFFFFFFC0000007FFFFFC000003FFFFE00000FFFFC0000FFFF,
		ram_block4a_5.operation_mode = "rom",
		ram_block4a_5.port_a_address_width = 9,
		ram_block4a_5.port_a_data_out_clear = "none",
		ram_block4a_5.port_a_data_out_clock = "none",
		ram_block4a_5.port_a_data_width = 1,
		ram_block4a_5.port_a_first_address = 0,
		ram_block4a_5.port_a_first_bit_number = 5,
		ram_block4a_5.port_a_last_address = 511,
		ram_block4a_5.port_a_logical_ram_depth = 512,
		ram_block4a_5.port_a_logical_ram_width = 9,
		ram_block4a_5.ram_block_type = "AUTO",
		ram_block4a_5.lpm_type = "cyclonev_ram_block";
	cyclonev_ram_block   ram_block4a_6
	( 
	.clk0(clock0),
	.dftout(),
	.eccstatus(),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_6portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1),
	.nerror(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_6.clk0_core_clock_enable = "ena0",
		ram_block4a_6.clk0_input_clock_enable = "ena0",
		ram_block4a_6.connectivity_checking = "OFF",
		ram_block4a_6.init_file = "altfp_divider_syn.hex",
		ram_block4a_6.init_file_layout = "port_a",
		ram_block4a_6.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_6.mem_init0 = 512'h00000000000000000000000000003FFFFFFFFFFFFFFFFFFFFFF8000000000000000000FFFFFFFFFFFFFFFC0000000000003FFFFFFFFFFE0000000003FFFFFFFF,
		ram_block4a_6.operation_mode = "rom",
		ram_block4a_6.port_a_address_width = 9,
		ram_block4a_6.port_a_data_out_clear = "none",
		ram_block4a_6.port_a_data_out_clock = "none",
		ram_block4a_6.port_a_data_width = 1,
		ram_block4a_6.port_a_first_address = 0,
		ram_block4a_6.port_a_first_bit_number = 6,
		ram_block4a_6.port_a_last_address = 511,
		ram_block4a_6.port_a_logical_ram_depth = 512,
		ram_block4a_6.port_a_logical_ram_width = 9,
		ram_block4a_6.ram_block_type = "AUTO",
		ram_block4a_6.lpm_type = "cyclonev_ram_block";
	cyclonev_ram_block   ram_block4a_7
	( 
	.clk0(clock0),
	.dftout(),
	.eccstatus(),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_7portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1),
	.nerror(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_7.clk0_core_clock_enable = "ena0",
		ram_block4a_7.clk0_input_clock_enable = "ena0",
		ram_block4a_7.connectivity_checking = "OFF",
		ram_block4a_7.init_file = "altfp_divider_syn.hex",
		ram_block4a_7.init_file_layout = "port_a",
		ram_block4a_7.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_7.mem_init0 = 512'h0000000000000000000000000000000000000000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000000000000000001FFFFFFFFFFFFFFFFFF,
		ram_block4a_7.operation_mode = "rom",
		ram_block4a_7.port_a_address_width = 9,
		ram_block4a_7.port_a_data_out_clear = "none",
		ram_block4a_7.port_a_data_out_clock = "none",
		ram_block4a_7.port_a_data_width = 1,
		ram_block4a_7.port_a_first_address = 0,
		ram_block4a_7.port_a_first_bit_number = 7,
		ram_block4a_7.port_a_last_address = 511,
		ram_block4a_7.port_a_logical_ram_depth = 512,
		ram_block4a_7.port_a_logical_ram_width = 9,
		ram_block4a_7.ram_block_type = "AUTO",
		ram_block4a_7.lpm_type = "cyclonev_ram_block";
	cyclonev_ram_block   ram_block4a_8
	( 
	.clk0(clock0),
	.dftout(),
	.eccstatus(),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_8portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1),
	.nerror(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_8.clk0_core_clock_enable = "ena0",
		ram_block4a_8.clk0_input_clock_enable = "ena0",
		ram_block4a_8.connectivity_checking = "OFF",
		ram_block4a_8.init_file = "altfp_divider_syn.hex",
		ram_block4a_8.init_file_layout = "port_a",
		ram_block4a_8.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_8.mem_init0 = 512'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,
		ram_block4a_8.operation_mode = "rom",
		ram_block4a_8.port_a_address_width = 9,
		ram_block4a_8.port_a_data_out_clear = "none",
		ram_block4a_8.port_a_data_out_clock = "none",
		ram_block4a_8.port_a_data_width = 1,
		ram_block4a_8.port_a_first_address = 0,
		ram_block4a_8.port_a_first_bit_number = 8,
		ram_block4a_8.port_a_last_address = 511,
		ram_block4a_8.port_a_logical_ram_depth = 512,
		ram_block4a_8.port_a_logical_ram_width = 9,
		ram_block4a_8.ram_block_type = "AUTO",
		ram_block4a_8.lpm_type = "cyclonev_ram_block";
	assign
		address_a_wire = address_a,
		q_a = {wire_ram_block4a_8portadataout[0], wire_ram_block4a_7portadataout[0], wire_ram_block4a_6portadataout[0], wire_ram_block4a_5portadataout[0], wire_ram_block4a_4portadataout[0], wire_ram_block4a_3portadataout[0], wire_ram_block4a_2portadataout[0], wire_ram_block4a_1portadataout[0], wire_ram_block4a_0portadataout[0]};
endmodule //altfp_divider_altsyncram


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=9 aclr clken clock dataa datab overflow result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=9 aclr clken clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=31 aclr cin clken clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=50 aclr clken clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_compare DEVICE_FAMILY="Cyclone V" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=23 alb dataa datab
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=3 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=25 LPM_WIDTHB=10 LPM_WIDTHP=35 aclr clken clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_mult 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider_mult
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [24:0]  dataa;
	input   [9:0]  datab;
	output   [34:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg  [24:0]  dataa_input_reg;
	reg  [9:0]  datab_input_reg;
	reg  [34:0]  result_output_reg;
	reg  [34:0]  result_extra0_reg;
	wire [24:0]    dataa_wire;
	wire [9:0]    datab_wire;
	wire [34:0]    result_wire;


	// synopsys translate_off
	initial
		dataa_input_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			dataa_input_reg <= 25'b0;
		else
			if (clken == 1'b1)
				dataa_input_reg <= dataa;
	// synopsys translate_off
	initial
		datab_input_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			datab_input_reg <= 10'b0;
		else
			if (clken == 1'b1)
				datab_input_reg <= datab;
	// synopsys translate_off
	initial
		result_output_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_output_reg <= 35'b0;
		else
			if (clken == 1'b1)
				result_output_reg <= result_extra0_reg;
	// synopsys translate_off
	initial
		result_extra0_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_extra0_reg <= 35'b0;
		else
			if (clken == 1'b1)
				result_extra0_reg <= result_wire[34:0];

	assign dataa_wire = dataa_input_reg;
	assign datab_wire = datab_input_reg;
	assign result_wire = dataa_wire * datab_wire;
	assign result = ({result_output_reg});

endmodule //altfp_divider_mult


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=3 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=24 LPM_WIDTHB=10 LPM_WIDTHP=34 aclr clken clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_mult 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider_mult1
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [23:0]  dataa;
	input   [9:0]  datab;
	output   [33:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg  [23:0]  dataa_input_reg;
	reg  [9:0]  datab_input_reg;
	reg  [33:0]  result_output_reg;
	reg  [33:0]  result_extra0_reg;
	wire [23:0]    dataa_wire;
	wire [9:0]    datab_wire;
	wire [33:0]    result_wire;


	// synopsys translate_off
	initial
		dataa_input_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			dataa_input_reg <= 24'b0;
		else
			if (clken == 1'b1)
				dataa_input_reg <= dataa;
	// synopsys translate_off
	initial
		datab_input_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			datab_input_reg <= 10'b0;
		else
			if (clken == 1'b1)
				datab_input_reg <= datab;
	// synopsys translate_off
	initial
		result_output_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_output_reg <= 34'b0;
		else
			if (clken == 1'b1)
				result_output_reg <= result_extra0_reg;
	// synopsys translate_off
	initial
		result_extra0_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_extra0_reg <= 34'b0;
		else
			if (clken == 1'b1)
				result_extra0_reg <= result_wire[33:0];

	assign dataa_wire = dataa_input_reg;
	assign datab_wire = datab_input_reg;
	assign result_wire = dataa_wire * datab_wire;
	assign result = ({result_output_reg});

endmodule //altfp_divider_mult1


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=17 LPM_WIDTHB=17 LPM_WIDTHP=34 aclr clken clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_mult 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider_mult12
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [16:0]  dataa;
	input   [16:0]  datab;
	output   [33:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg  [33:0]  result_output_reg;
	wire [16:0]    dataa_wire;
	wire [16:0]    datab_wire;
	wire [33:0]    result_wire;


	// synopsys translate_off
	initial
		result_output_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_output_reg <= 34'b0;
		else
			if (clken == 1'b1)
				result_output_reg <= result_wire[33:0];

	assign dataa_wire = dataa;
	assign datab_wire = datab;
	assign result_wire = dataa_wire * datab_wire;
	assign result = ({result_output_reg});

endmodule //altfp_divider_mult12


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=3 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=34 LPM_WIDTHB=17 LPM_WIDTHP=51 aclr clken clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_mult 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider_mult123
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [33:0]  dataa;
	input   [16:0]  datab;
	output   [50:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg  [33:0]  dataa_input_reg;
	reg  [16:0]  datab_input_reg;
	reg  [50:0]  result_output_reg;
	reg  [50:0]  result_extra0_reg;
	wire [33:0]    dataa_wire;
	wire [16:0]    datab_wire;
	wire [50:0]    result_wire;


	// synopsys translate_off
	initial
		dataa_input_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			dataa_input_reg <= 34'b0;
		else
			if (clken == 1'b1)
				dataa_input_reg <= dataa;
	// synopsys translate_off
	initial
		datab_input_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			datab_input_reg <= 17'b0;
		else
			if (clken == 1'b1)
				datab_input_reg <= datab;
	// synopsys translate_off
	initial
		result_output_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_output_reg <= 51'b0;
		else
			if (clken == 1'b1)
				result_output_reg <= result_extra0_reg;
	// synopsys translate_off
	initial
		result_extra0_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_extra0_reg <= 51'b0;
		else
			if (clken == 1'b1)
				result_extra0_reg <= result_wire[50:0];

	assign dataa_wire = dataa_input_reg;
	assign datab_wire = datab_input_reg;
	assign result_wire = dataa_wire * datab_wire;
	assign result = ({result_output_reg});

endmodule //altfp_divider_mult123

//synthesis_resources = lut 124 M10K 1 mux21 74 reg 847 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider_altfp_div_pst
	( 
	aclr,
	clk_en,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clk_en;
	input   clock;
	input   [31:0]  dataa;
	input   [31:0]  datab;
	output   [31:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clk_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [8:0]   wire_altsyncram3_q_a;
	reg	a_is_infinity_dffe_0;
	reg	a_is_infinity_dffe_1;
	reg	a_is_infinity_dffe_10;
	reg	a_is_infinity_dffe_11;
	reg	a_is_infinity_dffe_12;
	reg	a_is_infinity_dffe_2;
	reg	a_is_infinity_dffe_3;
	reg	a_is_infinity_dffe_4;
	reg	a_is_infinity_dffe_5;
	reg	a_is_infinity_dffe_6;
	reg	a_is_infinity_dffe_7;
	reg	a_is_infinity_dffe_8;
	reg	a_is_infinity_dffe_9;
	reg	a_zero_b_not_dffe_0;
	reg	a_zero_b_not_dffe_1;
	reg	a_zero_b_not_dffe_10;
	reg	a_zero_b_not_dffe_11;
	reg	a_zero_b_not_dffe_12;
	reg	a_zero_b_not_dffe_2;
	reg	a_zero_b_not_dffe_3;
	reg	a_zero_b_not_dffe_4;
	reg	a_zero_b_not_dffe_5;
	reg	a_zero_b_not_dffe_6;
	reg	a_zero_b_not_dffe_7;
	reg	a_zero_b_not_dffe_8;
	reg	a_zero_b_not_dffe_9;
	reg	[33:0]	b1_dffe_0;
	reg	[33:0]	b1_dffe_1;
	reg	b_is_infinity_dffe_0;
	reg	b_is_infinity_dffe_1;
	reg	b_is_infinity_dffe_10;
	reg	b_is_infinity_dffe_11;
	reg	b_is_infinity_dffe_12;
	reg	b_is_infinity_dffe_2;
	reg	b_is_infinity_dffe_3;
	reg	b_is_infinity_dffe_4;
	reg	b_is_infinity_dffe_5;
	reg	b_is_infinity_dffe_6;
	reg	b_is_infinity_dffe_7;
	reg	b_is_infinity_dffe_8;
	reg	b_is_infinity_dffe_9;
	reg	both_exp_zeros_dffe;
	reg	divbyzero_pipe_dffe_0;
	reg	divbyzero_pipe_dffe_1;
	reg	divbyzero_pipe_dffe_10;
	reg	divbyzero_pipe_dffe_11;
	reg	divbyzero_pipe_dffe_12;
	reg	divbyzero_pipe_dffe_2;
	reg	divbyzero_pipe_dffe_3;
	reg	divbyzero_pipe_dffe_4;
	reg	divbyzero_pipe_dffe_5;
	reg	divbyzero_pipe_dffe_6;
	reg	divbyzero_pipe_dffe_7;
	reg	divbyzero_pipe_dffe_8;
	reg	divbyzero_pipe_dffe_9;
	reg	[16:0]	e1_dffe_0;
	reg	[16:0]	e1_dffe_1;
	reg	[16:0]	e1_dffe_perf_0;
	reg	[16:0]	e1_dffe_perf_1;
	reg	[16:0]	e1_dffe_perf_2;
	reg	[16:0]	e1_dffe_perf_3;
	reg	[7:0]	exp_result_dffe_0;
	reg	[7:0]	exp_result_dffe_1;
	reg	[7:0]	exp_result_dffe_10;
	reg	[7:0]	exp_result_dffe_11;
	reg	[7:0]	exp_result_dffe_2;
	reg	[7:0]	exp_result_dffe_3;
	reg	[7:0]	exp_result_dffe_4;
	reg	[7:0]	exp_result_dffe_5;
	reg	[7:0]	exp_result_dffe_6;
	reg	[7:0]	exp_result_dffe_7;
	reg	[7:0]	exp_result_dffe_8;
	reg	[7:0]	exp_result_dffe_9;
	reg	frac_a_smaller_dffe1;
	reg	[22:0]	man_a_dffe1_dffe1;
	reg	[22:0]	man_b_dffe1_dffe1;
	reg	[22:0]	man_result_dffe;
	reg	nan_pipe_dffe_0;
	reg	nan_pipe_dffe_1;
	reg	nan_pipe_dffe_10;
	reg	nan_pipe_dffe_11;
	reg	nan_pipe_dffe_12;
	reg	nan_pipe_dffe_2;
	reg	nan_pipe_dffe_3;
	reg	nan_pipe_dffe_4;
	reg	nan_pipe_dffe_5;
	reg	nan_pipe_dffe_6;
	reg	nan_pipe_dffe_7;
	reg	nan_pipe_dffe_8;
	reg	nan_pipe_dffe_9;
	reg	over_under_dffe_0;
	reg	over_under_dffe_1;
	reg	over_under_dffe_10;
	reg	over_under_dffe_2;
	reg	over_under_dffe_3;
	reg	over_under_dffe_4;
	reg	over_under_dffe_5;
	reg	over_under_dffe_6;
	reg	over_under_dffe_7;
	reg	over_under_dffe_8;
	reg	over_under_dffe_9;
	reg	[33:0]	q_partial_perf_dffe_0;
	reg	[33:0]	q_partial_perf_dffe_1;
	reg	[16:0]	quotient_j_dffe;
	reg	[16:0]	quotient_k_dffe_0;
	reg	[16:0]	quotient_k_dffe_perf_0;
	reg	[16:0]	quotient_k_dffe_perf_1;
	reg	[16:0]	quotient_k_dffe_perf_2;
	reg	[16:0]	quotient_k_dffe_perf_3;
	reg	[49:0]	remainder_j_dffe_0;
	reg	[49:0]	remainder_j_dffe_1;
	reg	[49:0]	remainder_j_dffe_perf_0;
	reg	[49:0]	remainder_j_dffe_perf_1;
	reg	[49:0]	remainder_j_dffe_perf_2;
	reg	sign_pipe_dffe_0;
	reg	sign_pipe_dffe_1;
	reg	sign_pipe_dffe_10;
	reg	sign_pipe_dffe_11;
	reg	sign_pipe_dffe_12;
	reg	sign_pipe_dffe_13;
	reg	sign_pipe_dffe_2;
	reg	sign_pipe_dffe_3;
	reg	sign_pipe_dffe_4;
	reg	sign_pipe_dffe_5;
	reg	sign_pipe_dffe_6;
	reg	sign_pipe_dffe_7;
	reg	sign_pipe_dffe_8;
	reg	sign_pipe_dffe_9;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[8:0]	wire_bias_addition_pipeline_dffe_Q;
	wire	[8:0]	wire_bias_addition_pipeline_dffe_D;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[0:0]	wire_bias_addition_overflow_dffe_Q;
	wire	[0:0]	wire_bias_addition_overflow_dffe_D;
	wire	[8:0]	wire_bias_addition_result_int;
	wire	wire_bias_addition_aclr;
	wire	wire_bias_addition_clken;
	wire	wire_bias_addition_clock;
	wire	[8:0]	wire_bias_addition_dataa;
	wire	[8:0]	wire_bias_addition_datab;
	wire	wire_bias_addition_overflow;
	wire	[8:0]	wire_bias_addition_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[8:0]	wire_exp_sub_pipeline_dffe_Q;
	wire	[8:0]	wire_exp_sub_pipeline_dffe_D;
	wire	[8:0]	wire_exp_sub_result_int;
	wire	wire_exp_sub_aclr;
	wire	wire_exp_sub_clken;
	wire	wire_exp_sub_clock;
	wire	[8:0]	wire_exp_sub_dataa;
	wire	[8:0]	wire_exp_sub_datab;
	wire	[8:0]	wire_exp_sub_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[30:0]	wire_quotient_process_pipeline_dffe_Q;
	wire	[30:0]	wire_quotient_process_pipeline_dffe_D;
	wire	[31:0]	wire_quotient_process_result_int;
	wire	wire_quotient_process_aclr;
	wire	wire_quotient_process_cin;
	wire	wire_quotient_process_clken;
	wire	wire_quotient_process_clock;
	wire	[30:0]	wire_quotient_process_dataa;
	wire	[30:0]	wire_quotient_process_datab;
	wire	[30:0]	wire_quotient_process_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[49:0]	wire_remainder_sub_0_pipeline_dffe_Q;
	wire	[49:0]	wire_remainder_sub_0_pipeline_dffe_D;
	wire	[49:0]	wire_remainder_sub_0_result_int;
	wire	wire_remainder_sub_0_aclr;
	wire	wire_remainder_sub_0_clken;
	wire	wire_remainder_sub_0_clock;
	wire	[49:0]	wire_remainder_sub_0_dataa;
	wire	[49:0]	wire_remainder_sub_0_datab;
	wire	[49:0]	wire_remainder_sub_0_result;
	reg	wire_cmpr2_alb_int;
	wire	wire_cmpr2_alb;
	wire	[22:0]	wire_cmpr2_dataa;
	wire	[22:0]	wire_cmpr2_datab;
	wire  [9:0]   wire_a1_prod_datab;
	wire  [34:0]   wire_a1_prod_result;
	wire  [9:0]   wire_b1_prod_datab;
	wire  [33:0]   wire_b1_prod_result;
	wire  [16:0]   wire_q_partial_0_dataa;
	wire  [16:0]   wire_q_partial_0_datab;
	wire  [33:0]   wire_q_partial_0_result;
	wire  [33:0]   wire_q_partial_1_result;
	wire  [33:0]   wire_remainder_mult_0_dataa;
	wire  [16:0]   wire_remainder_mult_0_datab;
	wire  [50:0]   wire_remainder_mult_0_result;
	wire	[7:0]wire_exp_result_muxa_dataout;
	wire	[24:0]wire_man_a_adjusteda_dataout;
	wire	[22:0]wire_man_result_muxa_dataout;
	wire	[8:0]wire_select_bias_2a_dataout;
	wire	[8:0]wire_select_biasa_dataout;
	wire  a_is_infinity_w;
	wire  a_is_nan_w;
	wire  a_zero_b_not;
	wire  [33:0]  b1_dffe_w;
	wire  b_is_infinity_w;
	wire  b_is_nan_w;
	wire  bias_addition_overf_w;
	wire  [7:0]  bias_addition_w;
	wire  both_exp_zeros;
	wire  [8:0]  e0_dffe1_wo;
	wire  [8:0]  e0_w;
	wire  [50:0]  e1_w;
	wire  [7:0]  exp_a_all_one_w;
	wire  [7:0]  exp_a_not_zero_w;
	wire  [7:0]  exp_add_output_all_one;
	wire  [7:0]  exp_add_output_not_zero;
	wire  [7:0]  exp_b_all_one_w;
	wire  [7:0]  exp_b_not_zero_w;
	wire  [7:0]  exp_result_mux_out;
	wire  exp_result_mux_sel_w;
	wire  [7:0]  exp_result_w;
	wire  exp_sign_w;
	wire  [8:0]  exp_sub_a_w;
	wire  [8:0]  exp_sub_b_w;
	wire  [8:0]  exp_sub_w;
	wire  frac_a_smaller_dffe1_wi;
	wire  frac_a_smaller_dffe1_wo;
	wire  frac_a_smaller_w;
	wire  guard_bit;
	wire  [24:0]  man_a_adjusted_w;
	wire  [22:0]  man_a_dffe1_wi;
	wire  [22:0]  man_a_dffe1_wo;
	wire  [22:0]  man_a_not_zero_w;
	wire  [23:0]  man_b_adjusted_w;
	wire  [22:0]  man_b_dffe1_wi;
	wire  [22:0]  man_b_dffe1_wo;
	wire  [22:0]  man_b_not_zero_w;
	wire  [22:0]  man_result_dffe_wi;
	wire  [22:0]  man_result_dffe_wo;
	wire  man_result_mux_select;
	wire  [22:0]  man_result_w;
	wire  [22:0]  man_zeros_w;
	wire  [7:0]  overflow_ones_w;
	wire  overflow_underflow;
	wire  overflow_w;
	wire  [61:0]  quotient_accumulate_w;
	wire  quotient_process_cin_w;
	wire  [99:0]  remainder_j_w;
	wire  round_bit;
	wire  [8:0]  select_bias_out_2_w;
	wire  [8:0]  select_bias_out_w;
	wire  [4:0]  sticky_bits;
	wire  underflow_w;
	wire  [7:0]  underflow_zeros_w;
	wire  [8:0]  value_add_one_w;
	wire  [8:0]  value_normal_w;
	wire  [8:0]  value_zero_w;

	altfp_divider_altsyncram   altsyncram3
	( 
	.address_a(datab[22:14]),
	.clock0(clock),
	.clocken0(clk_en),
	.q_a(wire_altsyncram3_q_a));
	// synopsys translate_off
	initial
		a_is_infinity_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_0 <= a_is_infinity_w;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_1 <= a_is_infinity_dffe_0;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_10 <= a_is_infinity_dffe_9;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_11 <= a_is_infinity_dffe_10;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_12 <= a_is_infinity_dffe_11;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_2 <= a_is_infinity_dffe_1;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_3 <= a_is_infinity_dffe_2;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_4 <= a_is_infinity_dffe_3;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_5 <= a_is_infinity_dffe_4;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_6 <= a_is_infinity_dffe_5;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_7 <= a_is_infinity_dffe_6;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_8 <= a_is_infinity_dffe_7;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_9 <= a_is_infinity_dffe_8;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_0 <= a_zero_b_not;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_1 <= a_zero_b_not_dffe_0;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_10 <= a_zero_b_not_dffe_9;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_11 <= a_zero_b_not_dffe_10;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_12 <= a_zero_b_not_dffe_11;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_2 <= a_zero_b_not_dffe_1;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_3 <= a_zero_b_not_dffe_2;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_4 <= a_zero_b_not_dffe_3;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_5 <= a_zero_b_not_dffe_4;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_6 <= a_zero_b_not_dffe_5;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_7 <= a_zero_b_not_dffe_6;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_8 <= a_zero_b_not_dffe_7;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_9 <= a_zero_b_not_dffe_8;
	// synopsys translate_off
	initial
		b1_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b1_dffe_0 <= 34'b0;
		else if  (clk_en == 1'b1)   b1_dffe_0 <= wire_b1_prod_result;
	// synopsys translate_off
	initial
		b1_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b1_dffe_1 <= 34'b0;
		else if  (clk_en == 1'b1)   b1_dffe_1 <= b1_dffe_0;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_0 <= b_is_infinity_w;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_1 <= b_is_infinity_dffe_0;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_10 <= b_is_infinity_dffe_9;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_11 <= b_is_infinity_dffe_10;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_12 <= b_is_infinity_dffe_11;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_2 <= b_is_infinity_dffe_1;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_3 <= b_is_infinity_dffe_2;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_4 <= b_is_infinity_dffe_3;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_5 <= b_is_infinity_dffe_4;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_6 <= b_is_infinity_dffe_5;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_7 <= b_is_infinity_dffe_6;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_8 <= b_is_infinity_dffe_7;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_9 <= b_is_infinity_dffe_8;
	// synopsys translate_off
	initial
		both_exp_zeros_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) both_exp_zeros_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   both_exp_zeros_dffe <= ((~ exp_b_not_zero_w[7]) & (~ exp_a_not_zero_w[7]));
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_0 <= ((((~ exp_b_not_zero_w[7]) & (~ a_is_nan_w)) & exp_a_not_zero_w[7]) & (~ a_is_infinity_w));
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_1 <= divbyzero_pipe_dffe_0;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_10 <= divbyzero_pipe_dffe_9;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_11 <= divbyzero_pipe_dffe_10;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_12 <= divbyzero_pipe_dffe_11;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_2 <= divbyzero_pipe_dffe_1;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_3 <= divbyzero_pipe_dffe_2;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_4 <= divbyzero_pipe_dffe_3;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_5 <= divbyzero_pipe_dffe_4;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_6 <= divbyzero_pipe_dffe_5;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_7 <= divbyzero_pipe_dffe_6;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_8 <= divbyzero_pipe_dffe_7;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_9 <= divbyzero_pipe_dffe_8;
	// synopsys translate_off
	initial
		e1_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_0 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_0 <= e1_w[16:0];
	// synopsys translate_off
	initial
		e1_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_1 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_1 <= e1_w[33:17];
	// synopsys translate_off
	initial
		e1_dffe_perf_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_perf_0 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_perf_0 <= e1_dffe_0;
	// synopsys translate_off
	initial
		e1_dffe_perf_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_perf_1 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_perf_1 <= e1_dffe_perf_0;
	// synopsys translate_off
	initial
		e1_dffe_perf_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_perf_2 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_perf_2 <= e1_dffe_perf_1;
	// synopsys translate_off
	initial
		e1_dffe_perf_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_perf_3 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_perf_3 <= e1_dffe_perf_2;
	// synopsys translate_off
	initial
		exp_result_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_0 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_0 <= exp_result_mux_out;
	// synopsys translate_off
	initial
		exp_result_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_1 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_1 <= exp_result_dffe_0;
	// synopsys translate_off
	initial
		exp_result_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_10 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_10 <= exp_result_dffe_9;
	// synopsys translate_off
	initial
		exp_result_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_11 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_11 <= exp_result_dffe_10;
	// synopsys translate_off
	initial
		exp_result_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_2 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_2 <= exp_result_dffe_1;
	// synopsys translate_off
	initial
		exp_result_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_3 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_3 <= exp_result_dffe_2;
	// synopsys translate_off
	initial
		exp_result_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_4 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_4 <= exp_result_dffe_3;
	// synopsys translate_off
	initial
		exp_result_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_5 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_5 <= exp_result_dffe_4;
	// synopsys translate_off
	initial
		exp_result_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_6 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_6 <= exp_result_dffe_5;
	// synopsys translate_off
	initial
		exp_result_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_7 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_7 <= exp_result_dffe_6;
	// synopsys translate_off
	initial
		exp_result_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_8 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_8 <= exp_result_dffe_7;
	// synopsys translate_off
	initial
		exp_result_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_9 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_9 <= exp_result_dffe_8;
	// synopsys translate_off
	initial
		frac_a_smaller_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) frac_a_smaller_dffe1 <= 1'b0;
		else if  (clk_en == 1'b1)   frac_a_smaller_dffe1 <= frac_a_smaller_dffe1_wi;
	// synopsys translate_off
	initial
		man_a_dffe1_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_a_dffe1_dffe1 <= 23'b0;
		else if  (clk_en == 1'b1)   man_a_dffe1_dffe1 <= man_a_dffe1_wi;
	// synopsys translate_off
	initial
		man_b_dffe1_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_b_dffe1_dffe1 <= 23'b0;
		else if  (clk_en == 1'b1)   man_b_dffe1_dffe1 <= man_b_dffe1_wi;
	// synopsys translate_off
	initial
		man_result_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_result_dffe <= 23'b0;
		else if  (clk_en == 1'b1)   man_result_dffe <= man_result_dffe_wi;
	// synopsys translate_off
	initial
		nan_pipe_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_0 <= (((a_is_nan_w | b_is_nan_w) | (a_is_infinity_w & b_is_infinity_w)) | ((~ exp_a_not_zero_w[7]) & (~ exp_b_not_zero_w[7])));
	// synopsys translate_off
	initial
		nan_pipe_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_1 <= nan_pipe_dffe_0;
	// synopsys translate_off
	initial
		nan_pipe_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_10 <= nan_pipe_dffe_9;
	// synopsys translate_off
	initial
		nan_pipe_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_11 <= nan_pipe_dffe_10;
	// synopsys translate_off
	initial
		nan_pipe_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_12 <= nan_pipe_dffe_11;
	// synopsys translate_off
	initial
		nan_pipe_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_2 <= nan_pipe_dffe_1;
	// synopsys translate_off
	initial
		nan_pipe_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_3 <= nan_pipe_dffe_2;
	// synopsys translate_off
	initial
		nan_pipe_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_4 <= nan_pipe_dffe_3;
	// synopsys translate_off
	initial
		nan_pipe_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_5 <= nan_pipe_dffe_4;
	// synopsys translate_off
	initial
		nan_pipe_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_6 <= nan_pipe_dffe_5;
	// synopsys translate_off
	initial
		nan_pipe_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_7 <= nan_pipe_dffe_6;
	// synopsys translate_off
	initial
		nan_pipe_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_8 <= nan_pipe_dffe_7;
	// synopsys translate_off
	initial
		nan_pipe_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_9 <= nan_pipe_dffe_8;
	// synopsys translate_off
	initial
		over_under_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) over_under_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   over_under_dffe_0 <= overflow_underflow;
	// synopsys translate_off
	initial
		over_under_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) over_under_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   over_under_dffe_1 <= over_under_dffe_0;
	// synopsys translate_off
	initial
		over_under_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) over_under_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   over_under_dffe_10 <= over_under_dffe_9;
	// synopsys translate_off
	initial
		over_under_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) over_under_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   over_under_dffe_2 <= over_under_dffe_1;
	// synopsys translate_off
	initial
		over_under_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) over_under_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   over_under_dffe_3 <= over_under_dffe_2;
	// synopsys translate_off
	initial
		over_under_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) over_under_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   over_under_dffe_4 <= over_under_dffe_3;
	// synopsys translate_off
	initial
		over_under_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) over_under_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   over_under_dffe_5 <= over_under_dffe_4;
	// synopsys translate_off
	initial
		over_under_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) over_under_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   over_under_dffe_6 <= over_under_dffe_5;
	// synopsys translate_off
	initial
		over_under_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) over_under_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   over_under_dffe_7 <= over_under_dffe_6;
	// synopsys translate_off
	initial
		over_under_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) over_under_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   over_under_dffe_8 <= over_under_dffe_7;
	// synopsys translate_off
	initial
		over_under_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) over_under_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   over_under_dffe_9 <= over_under_dffe_8;
	// synopsys translate_off
	initial
		q_partial_perf_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) q_partial_perf_dffe_0 <= 34'b0;
		else if  (clk_en == 1'b1)   q_partial_perf_dffe_0 <= wire_q_partial_0_result;
	// synopsys translate_off
	initial
		q_partial_perf_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) q_partial_perf_dffe_1 <= 34'b0;
		else if  (clk_en == 1'b1)   q_partial_perf_dffe_1 <= wire_q_partial_1_result;
	// synopsys translate_off
	initial
		quotient_j_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_j_dffe <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_j_dffe <= q_partial_perf_dffe_0[32:16];
	// synopsys translate_off
	initial
		quotient_k_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_k_dffe_0 <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_k_dffe_0 <= quotient_k_dffe_perf_3;
	// synopsys translate_off
	initial
		quotient_k_dffe_perf_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_k_dffe_perf_0 <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_k_dffe_perf_0 <= quotient_accumulate_w[30:14];
	// synopsys translate_off
	initial
		quotient_k_dffe_perf_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_k_dffe_perf_1 <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_k_dffe_perf_1 <= quotient_k_dffe_perf_0;
	// synopsys translate_off
	initial
		quotient_k_dffe_perf_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_k_dffe_perf_2 <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_k_dffe_perf_2 <= quotient_k_dffe_perf_1;
	// synopsys translate_off
	initial
		quotient_k_dffe_perf_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_k_dffe_perf_3 <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_k_dffe_perf_3 <= quotient_k_dffe_perf_2;
	// synopsys translate_off
	initial
		remainder_j_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) remainder_j_dffe_0 <= 50'b0;
		else if  (clk_en == 1'b1)   remainder_j_dffe_0 <= remainder_j_w[49:0];
	// synopsys translate_off
	initial
		remainder_j_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) remainder_j_dffe_1 <= 50'b0;
		else if  (clk_en == 1'b1)   remainder_j_dffe_1 <= remainder_j_dffe_perf_2;
	// synopsys translate_off
	initial
		remainder_j_dffe_perf_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) remainder_j_dffe_perf_0 <= 50'b0;
		else if  (clk_en == 1'b1)   remainder_j_dffe_perf_0 <= remainder_j_dffe_0;
	// synopsys translate_off
	initial
		remainder_j_dffe_perf_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) remainder_j_dffe_perf_1 <= 50'b0;
		else if  (clk_en == 1'b1)   remainder_j_dffe_perf_1 <= remainder_j_dffe_perf_0;
	// synopsys translate_off
	initial
		remainder_j_dffe_perf_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) remainder_j_dffe_perf_2 <= 50'b0;
		else if  (clk_en == 1'b1)   remainder_j_dffe_perf_2 <= remainder_j_dffe_perf_1;
	// synopsys translate_off
	initial
		sign_pipe_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_0 <= (dataa[31] ^ datab[31]);
	// synopsys translate_off
	initial
		sign_pipe_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_1 <= sign_pipe_dffe_0;
	// synopsys translate_off
	initial
		sign_pipe_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_10 <= sign_pipe_dffe_9;
	// synopsys translate_off
	initial
		sign_pipe_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_11 <= sign_pipe_dffe_10;
	// synopsys translate_off
	initial
		sign_pipe_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_12 <= sign_pipe_dffe_11;
	// synopsys translate_off
	initial
		sign_pipe_dffe_13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_13 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_13 <= sign_pipe_dffe_12;
	// synopsys translate_off
	initial
		sign_pipe_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_2 <= sign_pipe_dffe_1;
	// synopsys translate_off
	initial
		sign_pipe_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_3 <= sign_pipe_dffe_2;
	// synopsys translate_off
	initial
		sign_pipe_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_4 <= sign_pipe_dffe_3;
	// synopsys translate_off
	initial
		sign_pipe_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_5 <= sign_pipe_dffe_4;
	// synopsys translate_off
	initial
		sign_pipe_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_6 <= sign_pipe_dffe_5;
	// synopsys translate_off
	initial
		sign_pipe_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_7 <= sign_pipe_dffe_6;
	// synopsys translate_off
	initial
		sign_pipe_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_8 <= sign_pipe_dffe_7;
	// synopsys translate_off
	initial
		sign_pipe_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_9 <= sign_pipe_dffe_8;
	assign
		wire_bias_addition_result_int = wire_bias_addition_dataa + wire_bias_addition_datab;
	//synopsys translate_off
	initial
		wire_bias_addition_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_bias_addition_clock or posedge wire_bias_addition_aclr)
		if (wire_bias_addition_aclr == 1'b1) wire_bias_addition_pipeline_dffe_Q <= 9'b0;
		else if (wire_bias_addition_clken == 1'b1) wire_bias_addition_pipeline_dffe_Q <= wire_bias_addition_pipeline_dffe_D;
	//synopsys translate_off
	initial
		wire_bias_addition_overflow_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_bias_addition_clock or posedge wire_bias_addition_aclr)
		if (wire_bias_addition_aclr == 1'b1) wire_bias_addition_overflow_dffe_Q <= 1'b0;
		else if (wire_bias_addition_clken == 1'b1) wire_bias_addition_overflow_dffe_Q <= wire_bias_addition_overflow_dffe_D;
	assign
		wire_bias_addition_result = wire_bias_addition_pipeline_dffe_Q[8:0],
		wire_bias_addition_pipeline_dffe_D[8:0] = wire_bias_addition_result_int;
	assign
		wire_bias_addition_overflow = wire_bias_addition_overflow_dffe_Q[0:0],
		wire_bias_addition_overflow_dffe_D[0:0] = ~(wire_bias_addition_dataa[8:8] ^ wire_bias_addition_datab[8:8]) & (wire_bias_addition_dataa[8:8] ^ wire_bias_addition_result_int[8:8]);
	assign
		wire_bias_addition_aclr = aclr,
		wire_bias_addition_clken = clk_en,
		wire_bias_addition_clock = clock,
		wire_bias_addition_dataa = exp_sub_w,
		wire_bias_addition_datab = select_bias_out_2_w;
	assign
		wire_exp_sub_result_int = wire_exp_sub_dataa - wire_exp_sub_datab;
	//synopsys translate_off
	initial
		wire_exp_sub_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_exp_sub_clock or posedge wire_exp_sub_aclr)
		if (wire_exp_sub_aclr == 1'b1) wire_exp_sub_pipeline_dffe_Q <= 9'b0;
		else if (wire_exp_sub_clken == 1'b1) wire_exp_sub_pipeline_dffe_Q <= wire_exp_sub_pipeline_dffe_D;
	assign
		wire_exp_sub_result = wire_exp_sub_pipeline_dffe_Q[8:0],
		wire_exp_sub_pipeline_dffe_D[8:0] = wire_exp_sub_result_int;
	assign
		wire_exp_sub_aclr = aclr,
		wire_exp_sub_clken = clk_en,
		wire_exp_sub_clock = clock,
		wire_exp_sub_dataa = exp_sub_a_w,
		wire_exp_sub_datab = exp_sub_b_w;
	assign
		wire_quotient_process_result_int = {wire_quotient_process_dataa, wire_quotient_process_cin} + {wire_quotient_process_datab, wire_quotient_process_cin};
	//synopsys translate_off
	initial
		wire_quotient_process_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_quotient_process_clock or posedge wire_quotient_process_aclr)
		if (wire_quotient_process_aclr == 1'b1) wire_quotient_process_pipeline_dffe_Q <= 31'b0;
		else if (wire_quotient_process_clken == 1'b1) wire_quotient_process_pipeline_dffe_Q <= wire_quotient_process_pipeline_dffe_D;
	assign
		wire_quotient_process_result = wire_quotient_process_pipeline_dffe_Q[30:0],
		wire_quotient_process_pipeline_dffe_D[30:0] = wire_quotient_process_result_int[31:1];
	assign
		wire_quotient_process_aclr = aclr,
		wire_quotient_process_cin = quotient_process_cin_w,
		wire_quotient_process_clken = clk_en,
		wire_quotient_process_clock = clock,
		wire_quotient_process_dataa = {quotient_accumulate_w[61:45], {14{1'b0}}},
		wire_quotient_process_datab = {{14{1'b0}}, q_partial_perf_dffe_1[32:22], {6{1'b1}}};
	assign
		wire_remainder_sub_0_result_int = wire_remainder_sub_0_dataa - wire_remainder_sub_0_datab;
	//synopsys translate_off
	initial
		wire_remainder_sub_0_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_remainder_sub_0_clock or posedge wire_remainder_sub_0_aclr)
		if (wire_remainder_sub_0_aclr == 1'b1) wire_remainder_sub_0_pipeline_dffe_Q <= 50'b0;
		else if (wire_remainder_sub_0_clken == 1'b1) wire_remainder_sub_0_pipeline_dffe_Q <= wire_remainder_sub_0_pipeline_dffe_D;
	assign
		wire_remainder_sub_0_result = wire_remainder_sub_0_pipeline_dffe_Q[49:0],
		wire_remainder_sub_0_pipeline_dffe_D[49:0] = wire_remainder_sub_0_result_int;
	assign
		wire_remainder_sub_0_aclr = aclr,
		wire_remainder_sub_0_clken = clk_en,
		wire_remainder_sub_0_clock = clock,
		wire_remainder_sub_0_dataa = {remainder_j_dffe_1[49:15], {15{1'b0}}},
		wire_remainder_sub_0_datab = wire_remainder_mult_0_result[49:0];
	always @(wire_cmpr2_dataa or wire_cmpr2_datab)
	begin
		if (wire_cmpr2_dataa < wire_cmpr2_datab) 
			begin
				wire_cmpr2_alb_int = 1'b1;
			end
		else
			begin
				wire_cmpr2_alb_int = 1'b0;
			end
	end
	assign
		wire_cmpr2_alb = wire_cmpr2_alb_int;
	assign
		wire_cmpr2_dataa = dataa[22:0],
		wire_cmpr2_datab = datab[22:0];
	altfp_divider_mult   a1_prod
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(man_a_adjusted_w),
	.datab({1'b1, e0_dffe1_wo}),
	.result(wire_a1_prod_result));
	altfp_divider_mult1   b1_prod
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(man_b_adjusted_w),
	.datab({1'b1, e0_dffe1_wo}),
	.result(wire_b1_prod_result));
	altfp_divider_mult12   q_partial_0
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(remainder_j_w[49:33]),
	.datab(e1_w[16:0]),
	.result(wire_q_partial_0_result));
	altfp_divider_mult12   q_partial_1
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(remainder_j_w[99:83]),
	.datab(e1_w[50:34]),
	.result(wire_q_partial_1_result));
	altfp_divider_mult123   remainder_mult_0
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(b1_dffe_w[33:0]),
	.datab(q_partial_perf_dffe_0[32:16]),
	.result(wire_remainder_mult_0_result));
	assign		wire_exp_result_muxa_dataout = (exp_result_mux_sel_w === 1'b1) ? underflow_zeros_w : exp_result_w;
	assign		wire_man_a_adjusteda_dataout = (frac_a_smaller_dffe1_wo === 1'b1) ? {1'b1, man_a_dffe1_wo, 1'b0} : {1'b0, 1'b1, man_a_dffe1_wo};
	assign		wire_man_result_muxa_dataout = (man_result_mux_select === 1'b1) ? {nan_pipe_dffe_12, man_zeros_w[21:0]} : wire_quotient_process_result[28:6];
	assign		wire_select_bias_2a_dataout = (both_exp_zeros === 1'b1) ? value_zero_w : select_bias_out_w;
	assign		wire_select_biasa_dataout = (frac_a_smaller_dffe1_wo === 1'b1) ? value_normal_w : value_add_one_w;
	assign
		a_is_infinity_w = (exp_a_all_one_w[7] & (~ man_a_not_zero_w[22])),
		a_is_nan_w = (exp_a_all_one_w[7] & man_a_not_zero_w[22]),
		a_zero_b_not = (exp_b_not_zero_w[7] & (~ exp_a_not_zero_w[7])),
		b1_dffe_w = {b1_dffe_1},
		b_is_infinity_w = (exp_b_all_one_w[7] & (~ man_b_not_zero_w[22])),
		b_is_nan_w = (exp_b_all_one_w[7] & man_b_not_zero_w[22]),
		bias_addition_overf_w = wire_bias_addition_overflow,
		bias_addition_w = wire_bias_addition_result[7:0],
		both_exp_zeros = both_exp_zeros_dffe,
		e0_dffe1_wo = e0_w,
		e0_w = wire_altsyncram3_q_a,
		e1_w = {e1_dffe_1, e1_dffe_perf_3, (~ wire_b1_prod_result[33:17])},
		exp_a_all_one_w = {(dataa[30] & exp_a_all_one_w[6]), (dataa[29] & exp_a_all_one_w[5]), (dataa[28] & exp_a_all_one_w[4]), (dataa[27] & exp_a_all_one_w[3]), (dataa[26] & exp_a_all_one_w[2]), (dataa[25] & exp_a_all_one_w[1]), (dataa[24] & exp_a_all_one_w[0]), dataa[23]},
		exp_a_not_zero_w = {(dataa[30] | exp_a_not_zero_w[6]), (dataa[29] | exp_a_not_zero_w[5]), (dataa[28] | exp_a_not_zero_w[4]), (dataa[27] | exp_a_not_zero_w[3]), (dataa[26] | exp_a_not_zero_w[2]), (dataa[25] | exp_a_not_zero_w[1]), (dataa[24] | exp_a_not_zero_w[0]), dataa[23]},
		exp_add_output_all_one = {(bias_addition_w[7] & exp_add_output_all_one[6]), (bias_addition_w[6] & exp_add_output_all_one[5]), (bias_addition_w[5] & exp_add_output_all_one[4]), (bias_addition_w[4] & exp_add_output_all_one[3]), (bias_addition_w[3] & exp_add_output_all_one[2]), (bias_addition_w[2] & exp_add_output_all_one[1]), (bias_addition_w[1] & exp_add_output_all_one[0]), bias_addition_w[0]},
		exp_add_output_not_zero = {(bias_addition_w[7] | exp_add_output_not_zero[6]), (bias_addition_w[6] | exp_add_output_not_zero[5]), (bias_addition_w[5] | exp_add_output_not_zero[4]), (bias_addition_w[4] | exp_add_output_not_zero[3]), (bias_addition_w[3] | exp_add_output_not_zero[2]), (bias_addition_w[2] | exp_add_output_not_zero[1]), (bias_addition_w[1] | exp_add_output_not_zero[0]), bias_addition_w[0]},
		exp_b_all_one_w = {(datab[30] & exp_b_all_one_w[6]), (datab[29] & exp_b_all_one_w[5]), (datab[28] & exp_b_all_one_w[4]), (datab[27] & exp_b_all_one_w[3]), (datab[26] & exp_b_all_one_w[2]), (datab[25] & exp_b_all_one_w[1]), (datab[24] & exp_b_all_one_w[0]), datab[23]},
		exp_b_not_zero_w = {(datab[30] | exp_b_not_zero_w[6]), (datab[29] | exp_b_not_zero_w[5]), (datab[28] | exp_b_not_zero_w[4]), (datab[27] | exp_b_not_zero_w[3]), (datab[26] | exp_b_not_zero_w[2]), (datab[25] | exp_b_not_zero_w[1]), (datab[24] | exp_b_not_zero_w[0]), datab[23]},
		exp_result_mux_out = wire_exp_result_muxa_dataout,
		exp_result_mux_sel_w = ((((a_zero_b_not_dffe_1 | b_is_infinity_dffe_1) | ((~ bias_addition_overf_w) & exp_sign_w)) | (((~ exp_add_output_not_zero[7]) & (~ bias_addition_overf_w)) & (~ exp_sign_w))) & (~ nan_pipe_dffe_1)),
		exp_result_w = (({8{((~ bias_addition_overf_w) & (~ exp_sign_w))}} & bias_addition_w) | ({8{(((bias_addition_overf_w | divbyzero_pipe_dffe_1) | nan_pipe_dffe_1) | a_is_infinity_dffe_1)}} & overflow_ones_w)),
		exp_sign_w = wire_bias_addition_result[8],
		exp_sub_a_w = {1'b0, dataa[30:23]},
		exp_sub_b_w = {1'b0, datab[30:23]},
		exp_sub_w = wire_exp_sub_result,
		frac_a_smaller_dffe1_wi = frac_a_smaller_w,
		frac_a_smaller_dffe1_wo = frac_a_smaller_dffe1,
		frac_a_smaller_w = wire_cmpr2_alb,
		guard_bit = q_partial_perf_dffe_1[22],
		man_a_adjusted_w = wire_man_a_adjusteda_dataout,
		man_a_dffe1_wi = dataa[22:0],
		man_a_dffe1_wo = man_a_dffe1_dffe1,
		man_a_not_zero_w = {(dataa[22] | man_a_not_zero_w[21]), (dataa[21] | man_a_not_zero_w[20]), (dataa[20] | man_a_not_zero_w[19]), (dataa[19] | man_a_not_zero_w[18]), (dataa[18] | man_a_not_zero_w[17]), (dataa[17] | man_a_not_zero_w[16]), (dataa[16] | man_a_not_zero_w[15]), (dataa[15] | man_a_not_zero_w[14]), (dataa[14] | man_a_not_zero_w[13]), (dataa[13] | man_a_not_zero_w[12]), (dataa[12] | man_a_not_zero_w[11]), (dataa[11] | man_a_not_zero_w[10]), (dataa[10] | man_a_not_zero_w[9]), (dataa[9] | man_a_not_zero_w[8]), (dataa[8] | man_a_not_zero_w[7]), (dataa[7] | man_a_not_zero_w[6]), (dataa[6] | man_a_not_zero_w[5]), (dataa[5] | man_a_not_zero_w[4]), (dataa[4] | man_a_not_zero_w[3]), (dataa[3] | man_a_not_zero_w[2]), (dataa[2] | man_a_not_zero_w[1]), (dataa[1] | man_a_not_zero_w[0]), dataa[0]},
		man_b_adjusted_w = {1'b1, man_b_dffe1_wo},
		man_b_dffe1_wi = datab[22:0],
		man_b_dffe1_wo = man_b_dffe1_dffe1,
		man_b_not_zero_w = {(datab[22] | man_b_not_zero_w[21]), (datab[21] | man_b_not_zero_w[20]), (datab[20] | man_b_not_zero_w[19]), (datab[19] | man_b_not_zero_w[18]), (datab[18] | man_b_not_zero_w[17]), (datab[17] | man_b_not_zero_w[16]), (datab[16] | man_b_not_zero_w[15]), (datab[15] | man_b_not_zero_w[14]), (datab[14] | man_b_not_zero_w[13]), (datab[13] | man_b_not_zero_w[12]), (datab[12] | man_b_not_zero_w[11]), (datab[11] | man_b_not_zero_w[10]), (datab[10] | man_b_not_zero_w[9]), (datab[9] | man_b_not_zero_w[8]), (datab[8] | man_b_not_zero_w[7]), (datab[7] | man_b_not_zero_w[6]), (datab[6] | man_b_not_zero_w[5]), (datab[5] | man_b_not_zero_w[4]), (datab[4] | man_b_not_zero_w[3]), (datab[3] | man_b_not_zero_w[2]), (datab[2] | man_b_not_zero_w[1]), (datab[1] | man_b_not_zero_w[0]), datab[0]},
		man_result_dffe_wi = man_result_w,
		man_result_dffe_wo = man_result_dffe,
		man_result_mux_select = (((((over_under_dffe_10 | a_zero_b_not_dffe_12) | nan_pipe_dffe_12) | b_is_infinity_dffe_12) | a_is_infinity_dffe_12) | divbyzero_pipe_dffe_12),
		man_result_w = wire_man_result_muxa_dataout,
		man_zeros_w = {23{1'b0}},
		overflow_ones_w = {8{1'b1}},
		overflow_underflow = (overflow_w | underflow_w),
		overflow_w = ((bias_addition_overf_w | ((exp_add_output_all_one[7] & (~ bias_addition_overf_w)) & (~ exp_sign_w))) & (((~ nan_pipe_dffe_1) & (~ a_is_infinity_dffe_1)) & (~ divbyzero_pipe_dffe_1))),
		quotient_accumulate_w = {quotient_k_dffe_0, {14{1'b0}}, quotient_j_dffe, {14{1'b0}}},
		quotient_process_cin_w = (round_bit & (guard_bit | sticky_bits[4])),
		remainder_j_w = {wire_remainder_sub_0_result[35:0], {14{1'b0}}, wire_a1_prod_result[34:0], {15{1'b0}}},
		result = {sign_pipe_dffe_13, exp_result_dffe_11, man_result_dffe_wo},
		round_bit = q_partial_perf_dffe_1[21],
		select_bias_out_2_w = wire_select_bias_2a_dataout,
		select_bias_out_w = wire_select_biasa_dataout,
		sticky_bits = {(q_partial_perf_dffe_1[20] | sticky_bits[3]), (q_partial_perf_dffe_1[19] | sticky_bits[2]), (q_partial_perf_dffe_1[18] | sticky_bits[1]), (q_partial_perf_dffe_1[17] | sticky_bits[0]), q_partial_perf_dffe_1[16]},
		underflow_w = ((((((~ bias_addition_overf_w) & exp_sign_w) | (((~ exp_add_output_not_zero[7]) & (~ bias_addition_overf_w)) & (~ exp_sign_w))) & (~ nan_pipe_dffe_1)) & (~ a_zero_b_not_dffe_1)) & (~ b_is_infinity_dffe_1)),
		underflow_zeros_w = {8{1'b0}},
		value_add_one_w = 9'b001111111,
		value_normal_w = 9'b001111110,
		value_zero_w = {9{1'b0}};
endmodule //altfp_divider_altfp_div_pst

//synthesis_resources = lut 124 M10K 1 mux21 74 reg 847 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider_altfp_div
	( 
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [31:0]  dataa;
	input   [31:0]  datab;
	output   [31:0]  result;

	wire  [31:0]   wire_altfp_div_pst1_result;
	wire aclr;
	wire clk_en;

	altfp_divider_altfp_div_pst   altfp_div_pst1
	( 
	.aclr(aclr),
	.clk_en(clk_en),
	.clock(clock),
	.dataa(dataa),
	.datab(datab),
	.result(wire_altfp_div_pst1_result));
	assign
		aclr = 1'b0,
		clk_en = 1'b1,
		result = wire_altfp_div_pst1_result;
endmodule //altfp_divider_altfp_div
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module altfp_divider (
	clock,
	dataa,
	datab,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[31:0]  dataa;
	input	[31:0]  datab;
	output	[31:0]  result;

	wire [31:0] sub_wire0;
	wire [31:0] result = sub_wire0[31:0];

	altfp_divider_altfp_div	altfp_divider_altfp_div_component (
				.clock (clock),
				.dataa (dataa),
				.datab (datab),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: DENORMAL_SUPPORT STRING "NO"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: CONSTANT: OPTIMIZE STRING "SPEED"
// Retrieval info: CONSTANT: PIPELINE NUMERIC "14"
// Retrieval info: CONSTANT: REDUCED_FUNCTIONALITY STRING "NO"
// Retrieval info: CONSTANT: WIDTH_EXP NUMERIC "8"
// Retrieval info: CONSTANT: WIDTH_MAN NUMERIC "23"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: dataa 0 0 32 0 INPUT NODEFVAL "dataa[31..0]"
// Retrieval info: USED_PORT: datab 0 0 32 0 INPUT NODEFVAL "datab[31..0]"
// Retrieval info: USED_PORT: result 0 0 32 0 OUTPUT NODEFVAL "result[31..0]"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @dataa 0 0 32 0 dataa 0 0 32 0
// Retrieval info: CONNECT: @datab 0 0 32 0 datab 0 0 32 0
// Retrieval info: CONNECT: result 0 0 32 0 @result 0 0 32 0
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider_syn.v TRUE
