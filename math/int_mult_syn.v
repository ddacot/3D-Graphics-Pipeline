// megafunction wizard: %LPM_MULT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: lpm_mult 

// ============================================================
// File Name: int_mult.v
// Megafunction Name(s):
// 			lpm_mult
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 18.1.0 Build 625 09/12/2018 SJ Lite Edition
// ************************************************************


//Copyright (C) 2018  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details.


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=50 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=32 LPM_WIDTHB=32 LPM_WIDTHP=32 MAXIMIZE_SPEED=9 clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_mult 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  int_mult_mult
	( 
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [31:0]  dataa;
	input   [31:0]  datab;
	output   [31:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg  [31:0]  dataa_input_reg;
	reg  [31:0]  datab_input_reg;
	reg  [31:0]  result_output_reg;
	reg  [31:0]  result_extra0_reg;
	reg  [31:0]  result_extra1_reg;
	reg  [31:0]  result_extra2_reg;
	reg  [31:0]  result_extra3_reg;
	reg  [31:0]  result_extra4_reg;
	reg  [31:0]  result_extra5_reg;
	reg  [31:0]  result_extra6_reg;
	reg  [31:0]  result_extra7_reg;
	reg  [31:0]  result_extra8_reg;
	reg  [31:0]  result_extra9_reg;
	reg  [31:0]  result_extra10_reg;
	reg  [31:0]  result_extra11_reg;
	reg  [31:0]  result_extra12_reg;
	reg  [31:0]  result_extra13_reg;
	reg  [31:0]  result_extra14_reg;
	reg  [31:0]  result_extra15_reg;
	reg  [31:0]  result_extra16_reg;
	reg  [31:0]  result_extra17_reg;
	reg  [31:0]  result_extra18_reg;
	reg  [31:0]  result_extra19_reg;
	reg  [31:0]  result_extra20_reg;
	reg  [31:0]  result_extra21_reg;
	reg  [31:0]  result_extra22_reg;
	reg  [31:0]  result_extra23_reg;
	reg  [31:0]  result_extra24_reg;
	reg  [31:0]  result_extra25_reg;
	reg  [31:0]  result_extra26_reg;
	reg  [31:0]  result_extra27_reg;
	reg  [31:0]  result_extra28_reg;
	reg  [31:0]  result_extra29_reg;
	reg  [31:0]  result_extra30_reg;
	reg  [31:0]  result_extra31_reg;
	reg  [31:0]  result_extra32_reg;
	reg  [31:0]  result_extra33_reg;
	reg  [31:0]  result_extra34_reg;
	reg  [31:0]  result_extra35_reg;
	reg  [31:0]  result_extra36_reg;
	reg  [31:0]  result_extra37_reg;
	reg  [31:0]  result_extra38_reg;
	reg  [31:0]  result_extra39_reg;
	reg  [31:0]  result_extra40_reg;
	reg  [31:0]  result_extra41_reg;
	reg  [31:0]  result_extra42_reg;
	reg  [31:0]  result_extra43_reg;
	reg  [31:0]  result_extra44_reg;
	reg  [31:0]  result_extra45_reg;
	reg  [31:0]  result_extra46_reg;
	reg  [31:0]  result_extra47_reg;
	wire signed	[31:0]    dataa_wire;
	wire signed	[31:0]    datab_wire;
	wire signed	[63:0]    result_wire;


	// synopsys translate_off
	initial
		dataa_input_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		dataa_input_reg <= dataa;
	// synopsys translate_off
	initial
		datab_input_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		datab_input_reg <= datab;
	// synopsys translate_off
	initial
		result_output_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_output_reg <= result_extra47_reg;
	// synopsys translate_off
	initial
		result_extra0_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra0_reg <= result_wire[63:32];
	// synopsys translate_off
	initial
		result_extra1_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra1_reg <= result_extra0_reg;
	// synopsys translate_off
	initial
		result_extra2_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra2_reg <= result_extra1_reg;
	// synopsys translate_off
	initial
		result_extra3_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra3_reg <= result_extra2_reg;
	// synopsys translate_off
	initial
		result_extra4_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra4_reg <= result_extra3_reg;
	// synopsys translate_off
	initial
		result_extra5_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra5_reg <= result_extra4_reg;
	// synopsys translate_off
	initial
		result_extra6_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra6_reg <= result_extra5_reg;
	// synopsys translate_off
	initial
		result_extra7_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra7_reg <= result_extra6_reg;
	// synopsys translate_off
	initial
		result_extra8_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra8_reg <= result_extra7_reg;
	// synopsys translate_off
	initial
		result_extra9_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra9_reg <= result_extra8_reg;
	// synopsys translate_off
	initial
		result_extra10_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra10_reg <= result_extra9_reg;
	// synopsys translate_off
	initial
		result_extra11_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra11_reg <= result_extra10_reg;
	// synopsys translate_off
	initial
		result_extra12_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra12_reg <= result_extra11_reg;
	// synopsys translate_off
	initial
		result_extra13_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra13_reg <= result_extra12_reg;
	// synopsys translate_off
	initial
		result_extra14_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra14_reg <= result_extra13_reg;
	// synopsys translate_off
	initial
		result_extra15_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra15_reg <= result_extra14_reg;
	// synopsys translate_off
	initial
		result_extra16_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra16_reg <= result_extra15_reg;
	// synopsys translate_off
	initial
		result_extra17_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra17_reg <= result_extra16_reg;
	// synopsys translate_off
	initial
		result_extra18_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra18_reg <= result_extra17_reg;
	// synopsys translate_off
	initial
		result_extra19_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra19_reg <= result_extra18_reg;
	// synopsys translate_off
	initial
		result_extra20_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra20_reg <= result_extra19_reg;
	// synopsys translate_off
	initial
		result_extra21_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra21_reg <= result_extra20_reg;
	// synopsys translate_off
	initial
		result_extra22_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra22_reg <= result_extra21_reg;
	// synopsys translate_off
	initial
		result_extra23_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra23_reg <= result_extra22_reg;
	// synopsys translate_off
	initial
		result_extra24_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra24_reg <= result_extra23_reg;
	// synopsys translate_off
	initial
		result_extra25_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra25_reg <= result_extra24_reg;
	// synopsys translate_off
	initial
		result_extra26_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra26_reg <= result_extra25_reg;
	// synopsys translate_off
	initial
		result_extra27_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra27_reg <= result_extra26_reg;
	// synopsys translate_off
	initial
		result_extra28_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra28_reg <= result_extra27_reg;
	// synopsys translate_off
	initial
		result_extra29_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra29_reg <= result_extra28_reg;
	// synopsys translate_off
	initial
		result_extra30_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra30_reg <= result_extra29_reg;
	// synopsys translate_off
	initial
		result_extra31_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra31_reg <= result_extra30_reg;
	// synopsys translate_off
	initial
		result_extra32_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra32_reg <= result_extra31_reg;
	// synopsys translate_off
	initial
		result_extra33_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra33_reg <= result_extra32_reg;
	// synopsys translate_off
	initial
		result_extra34_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra34_reg <= result_extra33_reg;
	// synopsys translate_off
	initial
		result_extra35_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra35_reg <= result_extra34_reg;
	// synopsys translate_off
	initial
		result_extra36_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra36_reg <= result_extra35_reg;
	// synopsys translate_off
	initial
		result_extra37_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra37_reg <= result_extra36_reg;
	// synopsys translate_off
	initial
		result_extra38_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra38_reg <= result_extra37_reg;
	// synopsys translate_off
	initial
		result_extra39_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra39_reg <= result_extra38_reg;
	// synopsys translate_off
	initial
		result_extra40_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra40_reg <= result_extra39_reg;
	// synopsys translate_off
	initial
		result_extra41_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra41_reg <= result_extra40_reg;
	// synopsys translate_off
	initial
		result_extra42_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra42_reg <= result_extra41_reg;
	// synopsys translate_off
	initial
		result_extra43_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra43_reg <= result_extra42_reg;
	// synopsys translate_off
	initial
		result_extra44_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra44_reg <= result_extra43_reg;
	// synopsys translate_off
	initial
		result_extra45_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra45_reg <= result_extra44_reg;
	// synopsys translate_off
	initial
		result_extra46_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra46_reg <= result_extra45_reg;
	// synopsys translate_off
	initial
		result_extra47_reg = 0;
	// synopsys translate_on
	always @(posedge clock)
		result_extra47_reg <= result_extra46_reg;

	assign dataa_wire = dataa_input_reg;
	assign datab_wire = datab_input_reg;
	assign result_wire = dataa_wire * datab_wire;
	assign result = ({result_output_reg});

endmodule //int_mult_mult
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module int_mult (
	clock,
	dataa,
	datab,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[31:0]  dataa;
	input	[31:0]  datab;
	output	[31:0]  result;

	wire [31:0] sub_wire0;
	wire [31:0] result = sub_wire0[31:0];

	int_mult_mult	int_mult_mult_component (
				.clock (clock),
				.dataa (dataa),
				.datab (datab),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AutoSizeResult NUMERIC "0"
// Retrieval info: PRIVATE: B_isConstant NUMERIC "0"
// Retrieval info: PRIVATE: ConstantB NUMERIC "0"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: PRIVATE: LPM_PIPELINE NUMERIC "50"
// Retrieval info: PRIVATE: Latency NUMERIC "1"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: SignedMult NUMERIC "1"
// Retrieval info: PRIVATE: USE_MULT NUMERIC "1"
// Retrieval info: PRIVATE: ValidConstant NUMERIC "0"
// Retrieval info: PRIVATE: WidthA NUMERIC "32"
// Retrieval info: PRIVATE: WidthB NUMERIC "32"
// Retrieval info: PRIVATE: WidthP NUMERIC "32"
// Retrieval info: PRIVATE: aclr NUMERIC "0"
// Retrieval info: PRIVATE: clken NUMERIC "0"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: PRIVATE: optimize NUMERIC "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_HINT STRING "DEDICATED_MULTIPLIER_CIRCUITRY=YES,MAXIMIZE_SPEED=9"
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "50"
// Retrieval info: CONSTANT: LPM_REPRESENTATION STRING "SIGNED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_MULT"
// Retrieval info: CONSTANT: LPM_WIDTHA NUMERIC "32"
// Retrieval info: CONSTANT: LPM_WIDTHB NUMERIC "32"
// Retrieval info: CONSTANT: LPM_WIDTHP NUMERIC "32"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: dataa 0 0 32 0 INPUT NODEFVAL "dataa[31..0]"
// Retrieval info: USED_PORT: datab 0 0 32 0 INPUT NODEFVAL "datab[31..0]"
// Retrieval info: USED_PORT: result 0 0 32 0 OUTPUT NODEFVAL "result[31..0]"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @dataa 0 0 32 0 dataa 0 0 32 0
// Retrieval info: CONNECT: @datab 0 0 32 0 datab 0 0 32 0
// Retrieval info: CONNECT: result 0 0 32 0 @result 0 0 32 0
// Retrieval info: GEN_FILE: TYPE_NORMAL int_mult.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL int_mult.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL int_mult.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL int_mult.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL int_mult_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL int_mult_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL int_mult_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
