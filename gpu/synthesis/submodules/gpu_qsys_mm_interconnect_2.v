// gpu_qsys_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module gpu_qsys_mm_interconnect_2 (
		input  wire [11:0] hps_h2f_axi_master_awid,                     //                    hps_h2f_axi_master.awid
		input  wire [29:0] hps_h2f_axi_master_awaddr,                   //                                      .awaddr
		input  wire [3:0]  hps_h2f_axi_master_awlen,                    //                                      .awlen
		input  wire [2:0]  hps_h2f_axi_master_awsize,                   //                                      .awsize
		input  wire [1:0]  hps_h2f_axi_master_awburst,                  //                                      .awburst
		input  wire [1:0]  hps_h2f_axi_master_awlock,                   //                                      .awlock
		input  wire [3:0]  hps_h2f_axi_master_awcache,                  //                                      .awcache
		input  wire [2:0]  hps_h2f_axi_master_awprot,                   //                                      .awprot
		input  wire        hps_h2f_axi_master_awvalid,                  //                                      .awvalid
		output wire        hps_h2f_axi_master_awready,                  //                                      .awready
		input  wire [11:0] hps_h2f_axi_master_wid,                      //                                      .wid
		input  wire [31:0] hps_h2f_axi_master_wdata,                    //                                      .wdata
		input  wire [3:0]  hps_h2f_axi_master_wstrb,                    //                                      .wstrb
		input  wire        hps_h2f_axi_master_wlast,                    //                                      .wlast
		input  wire        hps_h2f_axi_master_wvalid,                   //                                      .wvalid
		output wire        hps_h2f_axi_master_wready,                   //                                      .wready
		output wire [11:0] hps_h2f_axi_master_bid,                      //                                      .bid
		output wire [1:0]  hps_h2f_axi_master_bresp,                    //                                      .bresp
		output wire        hps_h2f_axi_master_bvalid,                   //                                      .bvalid
		input  wire        hps_h2f_axi_master_bready,                   //                                      .bready
		input  wire [11:0] hps_h2f_axi_master_arid,                     //                                      .arid
		input  wire [29:0] hps_h2f_axi_master_araddr,                   //                                      .araddr
		input  wire [3:0]  hps_h2f_axi_master_arlen,                    //                                      .arlen
		input  wire [2:0]  hps_h2f_axi_master_arsize,                   //                                      .arsize
		input  wire [1:0]  hps_h2f_axi_master_arburst,                  //                                      .arburst
		input  wire [1:0]  hps_h2f_axi_master_arlock,                   //                                      .arlock
		input  wire [3:0]  hps_h2f_axi_master_arcache,                  //                                      .arcache
		input  wire [2:0]  hps_h2f_axi_master_arprot,                   //                                      .arprot
		input  wire        hps_h2f_axi_master_arvalid,                  //                                      .arvalid
		output wire        hps_h2f_axi_master_arready,                  //                                      .arready
		output wire [11:0] hps_h2f_axi_master_rid,                      //                                      .rid
		output wire [31:0] hps_h2f_axi_master_rdata,                    //                                      .rdata
		output wire [1:0]  hps_h2f_axi_master_rresp,                    //                                      .rresp
		output wire        hps_h2f_axi_master_rlast,                    //                                      .rlast
		output wire        hps_h2f_axi_master_rvalid,                   //                                      .rvalid
		input  wire        hps_h2f_axi_master_rready,                   //                                      .rready
		input  wire        pll_outclk0_clk,                             //                           pll_outclk0.clk
		input  wire        pixel_dma_reset_reset_bridge_in_reset_reset, // pixel_dma_reset_reset_bridge_in_reset.reset
		output wire [0:0]  instr_fifo_in_address,                       //                         instr_fifo_in.address
		output wire        instr_fifo_in_write,                         //                                      .write
		output wire [31:0] instr_fifo_in_writedata,                     //                                      .writedata
		input  wire        instr_fifo_in_waitrequest,                   //                                      .waitrequest
		output wire [2:0]  instr_fifo_in_csr_address,                   //                     instr_fifo_in_csr.address
		output wire        instr_fifo_in_csr_write,                     //                                      .write
		output wire        instr_fifo_in_csr_read,                      //                                      .read
		input  wire [31:0] instr_fifo_in_csr_readdata,                  //                                      .readdata
		output wire [31:0] instr_fifo_in_csr_writedata,                 //                                      .writedata
		output wire [1:0]  pixel_dma_avalon_control_slave_address,      //        pixel_dma_avalon_control_slave.address
		output wire        pixel_dma_avalon_control_slave_write,        //                                      .write
		output wire        pixel_dma_avalon_control_slave_read,         //                                      .read
		input  wire [31:0] pixel_dma_avalon_control_slave_readdata,     //                                      .readdata
		output wire [31:0] pixel_dma_avalon_control_slave_writedata,    //                                      .writedata
		output wire [3:0]  pixel_dma_avalon_control_slave_byteenable,   //                                      .byteenable
		output wire [2:0]  prim_assembly_fifo_out_csr_address,          //            prim_assembly_fifo_out_csr.address
		output wire        prim_assembly_fifo_out_csr_write,            //                                      .write
		output wire        prim_assembly_fifo_out_csr_read,             //                                      .read
		input  wire [31:0] prim_assembly_fifo_out_csr_readdata,         //                                      .readdata
		output wire [31:0] prim_assembly_fifo_out_csr_writedata,        //                                      .writedata
		output wire [2:0]  raster_fifo_out_csr_address,                 //                   raster_fifo_out_csr.address
		output wire        raster_fifo_out_csr_write,                   //                                      .write
		output wire        raster_fifo_out_csr_read,                    //                                      .read
		input  wire [31:0] raster_fifo_out_csr_readdata,                //                                      .readdata
		output wire [31:0] raster_fifo_out_csr_writedata,               //                                      .writedata
		output wire [2:0]  vert_processing_fifo_out_csr_address,        //          vert_processing_fifo_out_csr.address
		output wire        vert_processing_fifo_out_csr_write,          //                                      .write
		output wire        vert_processing_fifo_out_csr_read,           //                                      .read
		input  wire [31:0] vert_processing_fifo_out_csr_readdata,       //                                      .readdata
		output wire [31:0] vert_processing_fifo_out_csr_writedata       //                                      .writedata
	);

	wire   [31:0] pixel_dma_avalon_control_slave_agent_m0_readdata;                   // pixel_dma_avalon_control_slave_translator:uav_readdata -> pixel_dma_avalon_control_slave_agent:m0_readdata
	wire          pixel_dma_avalon_control_slave_agent_m0_waitrequest;                // pixel_dma_avalon_control_slave_translator:uav_waitrequest -> pixel_dma_avalon_control_slave_agent:m0_waitrequest
	wire          pixel_dma_avalon_control_slave_agent_m0_debugaccess;                // pixel_dma_avalon_control_slave_agent:m0_debugaccess -> pixel_dma_avalon_control_slave_translator:uav_debugaccess
	wire   [29:0] pixel_dma_avalon_control_slave_agent_m0_address;                    // pixel_dma_avalon_control_slave_agent:m0_address -> pixel_dma_avalon_control_slave_translator:uav_address
	wire    [3:0] pixel_dma_avalon_control_slave_agent_m0_byteenable;                 // pixel_dma_avalon_control_slave_agent:m0_byteenable -> pixel_dma_avalon_control_slave_translator:uav_byteenable
	wire          pixel_dma_avalon_control_slave_agent_m0_read;                       // pixel_dma_avalon_control_slave_agent:m0_read -> pixel_dma_avalon_control_slave_translator:uav_read
	wire          pixel_dma_avalon_control_slave_agent_m0_readdatavalid;              // pixel_dma_avalon_control_slave_translator:uav_readdatavalid -> pixel_dma_avalon_control_slave_agent:m0_readdatavalid
	wire          pixel_dma_avalon_control_slave_agent_m0_lock;                       // pixel_dma_avalon_control_slave_agent:m0_lock -> pixel_dma_avalon_control_slave_translator:uav_lock
	wire   [31:0] pixel_dma_avalon_control_slave_agent_m0_writedata;                  // pixel_dma_avalon_control_slave_agent:m0_writedata -> pixel_dma_avalon_control_slave_translator:uav_writedata
	wire          pixel_dma_avalon_control_slave_agent_m0_write;                      // pixel_dma_avalon_control_slave_agent:m0_write -> pixel_dma_avalon_control_slave_translator:uav_write
	wire    [2:0] pixel_dma_avalon_control_slave_agent_m0_burstcount;                 // pixel_dma_avalon_control_slave_agent:m0_burstcount -> pixel_dma_avalon_control_slave_translator:uav_burstcount
	wire          pixel_dma_avalon_control_slave_agent_rf_source_valid;               // pixel_dma_avalon_control_slave_agent:rf_source_valid -> pixel_dma_avalon_control_slave_agent_rsp_fifo:in_valid
	wire  [125:0] pixel_dma_avalon_control_slave_agent_rf_source_data;                // pixel_dma_avalon_control_slave_agent:rf_source_data -> pixel_dma_avalon_control_slave_agent_rsp_fifo:in_data
	wire          pixel_dma_avalon_control_slave_agent_rf_source_ready;               // pixel_dma_avalon_control_slave_agent_rsp_fifo:in_ready -> pixel_dma_avalon_control_slave_agent:rf_source_ready
	wire          pixel_dma_avalon_control_slave_agent_rf_source_startofpacket;       // pixel_dma_avalon_control_slave_agent:rf_source_startofpacket -> pixel_dma_avalon_control_slave_agent_rsp_fifo:in_startofpacket
	wire          pixel_dma_avalon_control_slave_agent_rf_source_endofpacket;         // pixel_dma_avalon_control_slave_agent:rf_source_endofpacket -> pixel_dma_avalon_control_slave_agent_rsp_fifo:in_endofpacket
	wire          pixel_dma_avalon_control_slave_agent_rsp_fifo_out_valid;            // pixel_dma_avalon_control_slave_agent_rsp_fifo:out_valid -> pixel_dma_avalon_control_slave_agent:rf_sink_valid
	wire  [125:0] pixel_dma_avalon_control_slave_agent_rsp_fifo_out_data;             // pixel_dma_avalon_control_slave_agent_rsp_fifo:out_data -> pixel_dma_avalon_control_slave_agent:rf_sink_data
	wire          pixel_dma_avalon_control_slave_agent_rsp_fifo_out_ready;            // pixel_dma_avalon_control_slave_agent:rf_sink_ready -> pixel_dma_avalon_control_slave_agent_rsp_fifo:out_ready
	wire          pixel_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket;    // pixel_dma_avalon_control_slave_agent_rsp_fifo:out_startofpacket -> pixel_dma_avalon_control_slave_agent:rf_sink_startofpacket
	wire          pixel_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket;      // pixel_dma_avalon_control_slave_agent_rsp_fifo:out_endofpacket -> pixel_dma_avalon_control_slave_agent:rf_sink_endofpacket
	wire          pixel_dma_avalon_control_slave_agent_rdata_fifo_src_valid;          // pixel_dma_avalon_control_slave_agent:rdata_fifo_src_valid -> pixel_dma_avalon_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] pixel_dma_avalon_control_slave_agent_rdata_fifo_src_data;           // pixel_dma_avalon_control_slave_agent:rdata_fifo_src_data -> pixel_dma_avalon_control_slave_agent_rdata_fifo:in_data
	wire          pixel_dma_avalon_control_slave_agent_rdata_fifo_src_ready;          // pixel_dma_avalon_control_slave_agent_rdata_fifo:in_ready -> pixel_dma_avalon_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] instr_fifo_in_agent_m0_readdata;                                    // instr_fifo_in_translator:uav_readdata -> instr_fifo_in_agent:m0_readdata
	wire          instr_fifo_in_agent_m0_waitrequest;                                 // instr_fifo_in_translator:uav_waitrequest -> instr_fifo_in_agent:m0_waitrequest
	wire          instr_fifo_in_agent_m0_debugaccess;                                 // instr_fifo_in_agent:m0_debugaccess -> instr_fifo_in_translator:uav_debugaccess
	wire   [29:0] instr_fifo_in_agent_m0_address;                                     // instr_fifo_in_agent:m0_address -> instr_fifo_in_translator:uav_address
	wire    [3:0] instr_fifo_in_agent_m0_byteenable;                                  // instr_fifo_in_agent:m0_byteenable -> instr_fifo_in_translator:uav_byteenable
	wire          instr_fifo_in_agent_m0_read;                                        // instr_fifo_in_agent:m0_read -> instr_fifo_in_translator:uav_read
	wire          instr_fifo_in_agent_m0_readdatavalid;                               // instr_fifo_in_translator:uav_readdatavalid -> instr_fifo_in_agent:m0_readdatavalid
	wire          instr_fifo_in_agent_m0_lock;                                        // instr_fifo_in_agent:m0_lock -> instr_fifo_in_translator:uav_lock
	wire   [31:0] instr_fifo_in_agent_m0_writedata;                                   // instr_fifo_in_agent:m0_writedata -> instr_fifo_in_translator:uav_writedata
	wire          instr_fifo_in_agent_m0_write;                                       // instr_fifo_in_agent:m0_write -> instr_fifo_in_translator:uav_write
	wire    [2:0] instr_fifo_in_agent_m0_burstcount;                                  // instr_fifo_in_agent:m0_burstcount -> instr_fifo_in_translator:uav_burstcount
	wire          instr_fifo_in_agent_rf_source_valid;                                // instr_fifo_in_agent:rf_source_valid -> instr_fifo_in_agent_rsp_fifo:in_valid
	wire  [125:0] instr_fifo_in_agent_rf_source_data;                                 // instr_fifo_in_agent:rf_source_data -> instr_fifo_in_agent_rsp_fifo:in_data
	wire          instr_fifo_in_agent_rf_source_ready;                                // instr_fifo_in_agent_rsp_fifo:in_ready -> instr_fifo_in_agent:rf_source_ready
	wire          instr_fifo_in_agent_rf_source_startofpacket;                        // instr_fifo_in_agent:rf_source_startofpacket -> instr_fifo_in_agent_rsp_fifo:in_startofpacket
	wire          instr_fifo_in_agent_rf_source_endofpacket;                          // instr_fifo_in_agent:rf_source_endofpacket -> instr_fifo_in_agent_rsp_fifo:in_endofpacket
	wire          instr_fifo_in_agent_rsp_fifo_out_valid;                             // instr_fifo_in_agent_rsp_fifo:out_valid -> instr_fifo_in_agent:rf_sink_valid
	wire  [125:0] instr_fifo_in_agent_rsp_fifo_out_data;                              // instr_fifo_in_agent_rsp_fifo:out_data -> instr_fifo_in_agent:rf_sink_data
	wire          instr_fifo_in_agent_rsp_fifo_out_ready;                             // instr_fifo_in_agent:rf_sink_ready -> instr_fifo_in_agent_rsp_fifo:out_ready
	wire          instr_fifo_in_agent_rsp_fifo_out_startofpacket;                     // instr_fifo_in_agent_rsp_fifo:out_startofpacket -> instr_fifo_in_agent:rf_sink_startofpacket
	wire          instr_fifo_in_agent_rsp_fifo_out_endofpacket;                       // instr_fifo_in_agent_rsp_fifo:out_endofpacket -> instr_fifo_in_agent:rf_sink_endofpacket
	wire          instr_fifo_in_agent_rdata_fifo_src_valid;                           // instr_fifo_in_agent:rdata_fifo_src_valid -> instr_fifo_in_agent_rdata_fifo:in_valid
	wire   [33:0] instr_fifo_in_agent_rdata_fifo_src_data;                            // instr_fifo_in_agent:rdata_fifo_src_data -> instr_fifo_in_agent_rdata_fifo:in_data
	wire          instr_fifo_in_agent_rdata_fifo_src_ready;                           // instr_fifo_in_agent_rdata_fifo:in_ready -> instr_fifo_in_agent:rdata_fifo_src_ready
	wire   [31:0] instr_fifo_in_csr_agent_m0_readdata;                                // instr_fifo_in_csr_translator:uav_readdata -> instr_fifo_in_csr_agent:m0_readdata
	wire          instr_fifo_in_csr_agent_m0_waitrequest;                             // instr_fifo_in_csr_translator:uav_waitrequest -> instr_fifo_in_csr_agent:m0_waitrequest
	wire          instr_fifo_in_csr_agent_m0_debugaccess;                             // instr_fifo_in_csr_agent:m0_debugaccess -> instr_fifo_in_csr_translator:uav_debugaccess
	wire   [29:0] instr_fifo_in_csr_agent_m0_address;                                 // instr_fifo_in_csr_agent:m0_address -> instr_fifo_in_csr_translator:uav_address
	wire    [3:0] instr_fifo_in_csr_agent_m0_byteenable;                              // instr_fifo_in_csr_agent:m0_byteenable -> instr_fifo_in_csr_translator:uav_byteenable
	wire          instr_fifo_in_csr_agent_m0_read;                                    // instr_fifo_in_csr_agent:m0_read -> instr_fifo_in_csr_translator:uav_read
	wire          instr_fifo_in_csr_agent_m0_readdatavalid;                           // instr_fifo_in_csr_translator:uav_readdatavalid -> instr_fifo_in_csr_agent:m0_readdatavalid
	wire          instr_fifo_in_csr_agent_m0_lock;                                    // instr_fifo_in_csr_agent:m0_lock -> instr_fifo_in_csr_translator:uav_lock
	wire   [31:0] instr_fifo_in_csr_agent_m0_writedata;                               // instr_fifo_in_csr_agent:m0_writedata -> instr_fifo_in_csr_translator:uav_writedata
	wire          instr_fifo_in_csr_agent_m0_write;                                   // instr_fifo_in_csr_agent:m0_write -> instr_fifo_in_csr_translator:uav_write
	wire    [2:0] instr_fifo_in_csr_agent_m0_burstcount;                              // instr_fifo_in_csr_agent:m0_burstcount -> instr_fifo_in_csr_translator:uav_burstcount
	wire          instr_fifo_in_csr_agent_rf_source_valid;                            // instr_fifo_in_csr_agent:rf_source_valid -> instr_fifo_in_csr_agent_rsp_fifo:in_valid
	wire  [125:0] instr_fifo_in_csr_agent_rf_source_data;                             // instr_fifo_in_csr_agent:rf_source_data -> instr_fifo_in_csr_agent_rsp_fifo:in_data
	wire          instr_fifo_in_csr_agent_rf_source_ready;                            // instr_fifo_in_csr_agent_rsp_fifo:in_ready -> instr_fifo_in_csr_agent:rf_source_ready
	wire          instr_fifo_in_csr_agent_rf_source_startofpacket;                    // instr_fifo_in_csr_agent:rf_source_startofpacket -> instr_fifo_in_csr_agent_rsp_fifo:in_startofpacket
	wire          instr_fifo_in_csr_agent_rf_source_endofpacket;                      // instr_fifo_in_csr_agent:rf_source_endofpacket -> instr_fifo_in_csr_agent_rsp_fifo:in_endofpacket
	wire          instr_fifo_in_csr_agent_rsp_fifo_out_valid;                         // instr_fifo_in_csr_agent_rsp_fifo:out_valid -> instr_fifo_in_csr_agent:rf_sink_valid
	wire  [125:0] instr_fifo_in_csr_agent_rsp_fifo_out_data;                          // instr_fifo_in_csr_agent_rsp_fifo:out_data -> instr_fifo_in_csr_agent:rf_sink_data
	wire          instr_fifo_in_csr_agent_rsp_fifo_out_ready;                         // instr_fifo_in_csr_agent:rf_sink_ready -> instr_fifo_in_csr_agent_rsp_fifo:out_ready
	wire          instr_fifo_in_csr_agent_rsp_fifo_out_startofpacket;                 // instr_fifo_in_csr_agent_rsp_fifo:out_startofpacket -> instr_fifo_in_csr_agent:rf_sink_startofpacket
	wire          instr_fifo_in_csr_agent_rsp_fifo_out_endofpacket;                   // instr_fifo_in_csr_agent_rsp_fifo:out_endofpacket -> instr_fifo_in_csr_agent:rf_sink_endofpacket
	wire          instr_fifo_in_csr_agent_rdata_fifo_src_valid;                       // instr_fifo_in_csr_agent:rdata_fifo_src_valid -> instr_fifo_in_csr_agent_rdata_fifo:in_valid
	wire   [33:0] instr_fifo_in_csr_agent_rdata_fifo_src_data;                        // instr_fifo_in_csr_agent:rdata_fifo_src_data -> instr_fifo_in_csr_agent_rdata_fifo:in_data
	wire          instr_fifo_in_csr_agent_rdata_fifo_src_ready;                       // instr_fifo_in_csr_agent_rdata_fifo:in_ready -> instr_fifo_in_csr_agent:rdata_fifo_src_ready
	wire   [31:0] vert_processing_fifo_out_csr_agent_m0_readdata;                     // vert_processing_fifo_out_csr_translator:uav_readdata -> vert_processing_fifo_out_csr_agent:m0_readdata
	wire          vert_processing_fifo_out_csr_agent_m0_waitrequest;                  // vert_processing_fifo_out_csr_translator:uav_waitrequest -> vert_processing_fifo_out_csr_agent:m0_waitrequest
	wire          vert_processing_fifo_out_csr_agent_m0_debugaccess;                  // vert_processing_fifo_out_csr_agent:m0_debugaccess -> vert_processing_fifo_out_csr_translator:uav_debugaccess
	wire   [29:0] vert_processing_fifo_out_csr_agent_m0_address;                      // vert_processing_fifo_out_csr_agent:m0_address -> vert_processing_fifo_out_csr_translator:uav_address
	wire    [3:0] vert_processing_fifo_out_csr_agent_m0_byteenable;                   // vert_processing_fifo_out_csr_agent:m0_byteenable -> vert_processing_fifo_out_csr_translator:uav_byteenable
	wire          vert_processing_fifo_out_csr_agent_m0_read;                         // vert_processing_fifo_out_csr_agent:m0_read -> vert_processing_fifo_out_csr_translator:uav_read
	wire          vert_processing_fifo_out_csr_agent_m0_readdatavalid;                // vert_processing_fifo_out_csr_translator:uav_readdatavalid -> vert_processing_fifo_out_csr_agent:m0_readdatavalid
	wire          vert_processing_fifo_out_csr_agent_m0_lock;                         // vert_processing_fifo_out_csr_agent:m0_lock -> vert_processing_fifo_out_csr_translator:uav_lock
	wire   [31:0] vert_processing_fifo_out_csr_agent_m0_writedata;                    // vert_processing_fifo_out_csr_agent:m0_writedata -> vert_processing_fifo_out_csr_translator:uav_writedata
	wire          vert_processing_fifo_out_csr_agent_m0_write;                        // vert_processing_fifo_out_csr_agent:m0_write -> vert_processing_fifo_out_csr_translator:uav_write
	wire    [2:0] vert_processing_fifo_out_csr_agent_m0_burstcount;                   // vert_processing_fifo_out_csr_agent:m0_burstcount -> vert_processing_fifo_out_csr_translator:uav_burstcount
	wire          vert_processing_fifo_out_csr_agent_rf_source_valid;                 // vert_processing_fifo_out_csr_agent:rf_source_valid -> vert_processing_fifo_out_csr_agent_rsp_fifo:in_valid
	wire  [125:0] vert_processing_fifo_out_csr_agent_rf_source_data;                  // vert_processing_fifo_out_csr_agent:rf_source_data -> vert_processing_fifo_out_csr_agent_rsp_fifo:in_data
	wire          vert_processing_fifo_out_csr_agent_rf_source_ready;                 // vert_processing_fifo_out_csr_agent_rsp_fifo:in_ready -> vert_processing_fifo_out_csr_agent:rf_source_ready
	wire          vert_processing_fifo_out_csr_agent_rf_source_startofpacket;         // vert_processing_fifo_out_csr_agent:rf_source_startofpacket -> vert_processing_fifo_out_csr_agent_rsp_fifo:in_startofpacket
	wire          vert_processing_fifo_out_csr_agent_rf_source_endofpacket;           // vert_processing_fifo_out_csr_agent:rf_source_endofpacket -> vert_processing_fifo_out_csr_agent_rsp_fifo:in_endofpacket
	wire          vert_processing_fifo_out_csr_agent_rsp_fifo_out_valid;              // vert_processing_fifo_out_csr_agent_rsp_fifo:out_valid -> vert_processing_fifo_out_csr_agent:rf_sink_valid
	wire  [125:0] vert_processing_fifo_out_csr_agent_rsp_fifo_out_data;               // vert_processing_fifo_out_csr_agent_rsp_fifo:out_data -> vert_processing_fifo_out_csr_agent:rf_sink_data
	wire          vert_processing_fifo_out_csr_agent_rsp_fifo_out_ready;              // vert_processing_fifo_out_csr_agent:rf_sink_ready -> vert_processing_fifo_out_csr_agent_rsp_fifo:out_ready
	wire          vert_processing_fifo_out_csr_agent_rsp_fifo_out_startofpacket;      // vert_processing_fifo_out_csr_agent_rsp_fifo:out_startofpacket -> vert_processing_fifo_out_csr_agent:rf_sink_startofpacket
	wire          vert_processing_fifo_out_csr_agent_rsp_fifo_out_endofpacket;        // vert_processing_fifo_out_csr_agent_rsp_fifo:out_endofpacket -> vert_processing_fifo_out_csr_agent:rf_sink_endofpacket
	wire          vert_processing_fifo_out_csr_agent_rdata_fifo_src_valid;            // vert_processing_fifo_out_csr_agent:rdata_fifo_src_valid -> vert_processing_fifo_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] vert_processing_fifo_out_csr_agent_rdata_fifo_src_data;             // vert_processing_fifo_out_csr_agent:rdata_fifo_src_data -> vert_processing_fifo_out_csr_agent_rdata_fifo:in_data
	wire          vert_processing_fifo_out_csr_agent_rdata_fifo_src_ready;            // vert_processing_fifo_out_csr_agent_rdata_fifo:in_ready -> vert_processing_fifo_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] prim_assembly_fifo_out_csr_agent_m0_readdata;                       // prim_assembly_fifo_out_csr_translator:uav_readdata -> prim_assembly_fifo_out_csr_agent:m0_readdata
	wire          prim_assembly_fifo_out_csr_agent_m0_waitrequest;                    // prim_assembly_fifo_out_csr_translator:uav_waitrequest -> prim_assembly_fifo_out_csr_agent:m0_waitrequest
	wire          prim_assembly_fifo_out_csr_agent_m0_debugaccess;                    // prim_assembly_fifo_out_csr_agent:m0_debugaccess -> prim_assembly_fifo_out_csr_translator:uav_debugaccess
	wire   [29:0] prim_assembly_fifo_out_csr_agent_m0_address;                        // prim_assembly_fifo_out_csr_agent:m0_address -> prim_assembly_fifo_out_csr_translator:uav_address
	wire    [3:0] prim_assembly_fifo_out_csr_agent_m0_byteenable;                     // prim_assembly_fifo_out_csr_agent:m0_byteenable -> prim_assembly_fifo_out_csr_translator:uav_byteenable
	wire          prim_assembly_fifo_out_csr_agent_m0_read;                           // prim_assembly_fifo_out_csr_agent:m0_read -> prim_assembly_fifo_out_csr_translator:uav_read
	wire          prim_assembly_fifo_out_csr_agent_m0_readdatavalid;                  // prim_assembly_fifo_out_csr_translator:uav_readdatavalid -> prim_assembly_fifo_out_csr_agent:m0_readdatavalid
	wire          prim_assembly_fifo_out_csr_agent_m0_lock;                           // prim_assembly_fifo_out_csr_agent:m0_lock -> prim_assembly_fifo_out_csr_translator:uav_lock
	wire   [31:0] prim_assembly_fifo_out_csr_agent_m0_writedata;                      // prim_assembly_fifo_out_csr_agent:m0_writedata -> prim_assembly_fifo_out_csr_translator:uav_writedata
	wire          prim_assembly_fifo_out_csr_agent_m0_write;                          // prim_assembly_fifo_out_csr_agent:m0_write -> prim_assembly_fifo_out_csr_translator:uav_write
	wire    [2:0] prim_assembly_fifo_out_csr_agent_m0_burstcount;                     // prim_assembly_fifo_out_csr_agent:m0_burstcount -> prim_assembly_fifo_out_csr_translator:uav_burstcount
	wire          prim_assembly_fifo_out_csr_agent_rf_source_valid;                   // prim_assembly_fifo_out_csr_agent:rf_source_valid -> prim_assembly_fifo_out_csr_agent_rsp_fifo:in_valid
	wire  [125:0] prim_assembly_fifo_out_csr_agent_rf_source_data;                    // prim_assembly_fifo_out_csr_agent:rf_source_data -> prim_assembly_fifo_out_csr_agent_rsp_fifo:in_data
	wire          prim_assembly_fifo_out_csr_agent_rf_source_ready;                   // prim_assembly_fifo_out_csr_agent_rsp_fifo:in_ready -> prim_assembly_fifo_out_csr_agent:rf_source_ready
	wire          prim_assembly_fifo_out_csr_agent_rf_source_startofpacket;           // prim_assembly_fifo_out_csr_agent:rf_source_startofpacket -> prim_assembly_fifo_out_csr_agent_rsp_fifo:in_startofpacket
	wire          prim_assembly_fifo_out_csr_agent_rf_source_endofpacket;             // prim_assembly_fifo_out_csr_agent:rf_source_endofpacket -> prim_assembly_fifo_out_csr_agent_rsp_fifo:in_endofpacket
	wire          prim_assembly_fifo_out_csr_agent_rsp_fifo_out_valid;                // prim_assembly_fifo_out_csr_agent_rsp_fifo:out_valid -> prim_assembly_fifo_out_csr_agent:rf_sink_valid
	wire  [125:0] prim_assembly_fifo_out_csr_agent_rsp_fifo_out_data;                 // prim_assembly_fifo_out_csr_agent_rsp_fifo:out_data -> prim_assembly_fifo_out_csr_agent:rf_sink_data
	wire          prim_assembly_fifo_out_csr_agent_rsp_fifo_out_ready;                // prim_assembly_fifo_out_csr_agent:rf_sink_ready -> prim_assembly_fifo_out_csr_agent_rsp_fifo:out_ready
	wire          prim_assembly_fifo_out_csr_agent_rsp_fifo_out_startofpacket;        // prim_assembly_fifo_out_csr_agent_rsp_fifo:out_startofpacket -> prim_assembly_fifo_out_csr_agent:rf_sink_startofpacket
	wire          prim_assembly_fifo_out_csr_agent_rsp_fifo_out_endofpacket;          // prim_assembly_fifo_out_csr_agent_rsp_fifo:out_endofpacket -> prim_assembly_fifo_out_csr_agent:rf_sink_endofpacket
	wire          prim_assembly_fifo_out_csr_agent_rdata_fifo_src_valid;              // prim_assembly_fifo_out_csr_agent:rdata_fifo_src_valid -> prim_assembly_fifo_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] prim_assembly_fifo_out_csr_agent_rdata_fifo_src_data;               // prim_assembly_fifo_out_csr_agent:rdata_fifo_src_data -> prim_assembly_fifo_out_csr_agent_rdata_fifo:in_data
	wire          prim_assembly_fifo_out_csr_agent_rdata_fifo_src_ready;              // prim_assembly_fifo_out_csr_agent_rdata_fifo:in_ready -> prim_assembly_fifo_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] raster_fifo_out_csr_agent_m0_readdata;                              // raster_fifo_out_csr_translator:uav_readdata -> raster_fifo_out_csr_agent:m0_readdata
	wire          raster_fifo_out_csr_agent_m0_waitrequest;                           // raster_fifo_out_csr_translator:uav_waitrequest -> raster_fifo_out_csr_agent:m0_waitrequest
	wire          raster_fifo_out_csr_agent_m0_debugaccess;                           // raster_fifo_out_csr_agent:m0_debugaccess -> raster_fifo_out_csr_translator:uav_debugaccess
	wire   [29:0] raster_fifo_out_csr_agent_m0_address;                               // raster_fifo_out_csr_agent:m0_address -> raster_fifo_out_csr_translator:uav_address
	wire    [3:0] raster_fifo_out_csr_agent_m0_byteenable;                            // raster_fifo_out_csr_agent:m0_byteenable -> raster_fifo_out_csr_translator:uav_byteenable
	wire          raster_fifo_out_csr_agent_m0_read;                                  // raster_fifo_out_csr_agent:m0_read -> raster_fifo_out_csr_translator:uav_read
	wire          raster_fifo_out_csr_agent_m0_readdatavalid;                         // raster_fifo_out_csr_translator:uav_readdatavalid -> raster_fifo_out_csr_agent:m0_readdatavalid
	wire          raster_fifo_out_csr_agent_m0_lock;                                  // raster_fifo_out_csr_agent:m0_lock -> raster_fifo_out_csr_translator:uav_lock
	wire   [31:0] raster_fifo_out_csr_agent_m0_writedata;                             // raster_fifo_out_csr_agent:m0_writedata -> raster_fifo_out_csr_translator:uav_writedata
	wire          raster_fifo_out_csr_agent_m0_write;                                 // raster_fifo_out_csr_agent:m0_write -> raster_fifo_out_csr_translator:uav_write
	wire    [2:0] raster_fifo_out_csr_agent_m0_burstcount;                            // raster_fifo_out_csr_agent:m0_burstcount -> raster_fifo_out_csr_translator:uav_burstcount
	wire          raster_fifo_out_csr_agent_rf_source_valid;                          // raster_fifo_out_csr_agent:rf_source_valid -> raster_fifo_out_csr_agent_rsp_fifo:in_valid
	wire  [125:0] raster_fifo_out_csr_agent_rf_source_data;                           // raster_fifo_out_csr_agent:rf_source_data -> raster_fifo_out_csr_agent_rsp_fifo:in_data
	wire          raster_fifo_out_csr_agent_rf_source_ready;                          // raster_fifo_out_csr_agent_rsp_fifo:in_ready -> raster_fifo_out_csr_agent:rf_source_ready
	wire          raster_fifo_out_csr_agent_rf_source_startofpacket;                  // raster_fifo_out_csr_agent:rf_source_startofpacket -> raster_fifo_out_csr_agent_rsp_fifo:in_startofpacket
	wire          raster_fifo_out_csr_agent_rf_source_endofpacket;                    // raster_fifo_out_csr_agent:rf_source_endofpacket -> raster_fifo_out_csr_agent_rsp_fifo:in_endofpacket
	wire          raster_fifo_out_csr_agent_rsp_fifo_out_valid;                       // raster_fifo_out_csr_agent_rsp_fifo:out_valid -> raster_fifo_out_csr_agent:rf_sink_valid
	wire  [125:0] raster_fifo_out_csr_agent_rsp_fifo_out_data;                        // raster_fifo_out_csr_agent_rsp_fifo:out_data -> raster_fifo_out_csr_agent:rf_sink_data
	wire          raster_fifo_out_csr_agent_rsp_fifo_out_ready;                       // raster_fifo_out_csr_agent:rf_sink_ready -> raster_fifo_out_csr_agent_rsp_fifo:out_ready
	wire          raster_fifo_out_csr_agent_rsp_fifo_out_startofpacket;               // raster_fifo_out_csr_agent_rsp_fifo:out_startofpacket -> raster_fifo_out_csr_agent:rf_sink_startofpacket
	wire          raster_fifo_out_csr_agent_rsp_fifo_out_endofpacket;                 // raster_fifo_out_csr_agent_rsp_fifo:out_endofpacket -> raster_fifo_out_csr_agent:rf_sink_endofpacket
	wire          raster_fifo_out_csr_agent_rdata_fifo_src_valid;                     // raster_fifo_out_csr_agent:rdata_fifo_src_valid -> raster_fifo_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] raster_fifo_out_csr_agent_rdata_fifo_src_data;                      // raster_fifo_out_csr_agent:rdata_fifo_src_data -> raster_fifo_out_csr_agent_rdata_fifo:in_data
	wire          raster_fifo_out_csr_agent_rdata_fifo_src_ready;                     // raster_fifo_out_csr_agent_rdata_fifo:in_ready -> raster_fifo_out_csr_agent:rdata_fifo_src_ready
	wire          hps_h2f_axi_master_agent_write_cp_valid;                            // hps_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [124:0] hps_h2f_axi_master_agent_write_cp_data;                             // hps_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_h2f_axi_master_agent_write_cp_ready;                            // router:sink_ready -> hps_h2f_axi_master_agent:write_cp_ready
	wire          hps_h2f_axi_master_agent_write_cp_startofpacket;                    // hps_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_h2f_axi_master_agent_write_cp_endofpacket;                      // hps_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_h2f_axi_master_agent_read_cp_valid;                             // hps_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [124:0] hps_h2f_axi_master_agent_read_cp_data;                              // hps_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_h2f_axi_master_agent_read_cp_ready;                             // router_001:sink_ready -> hps_h2f_axi_master_agent:read_cp_ready
	wire          hps_h2f_axi_master_agent_read_cp_startofpacket;                     // hps_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_h2f_axi_master_agent_read_cp_endofpacket;                       // hps_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          pixel_dma_avalon_control_slave_agent_rp_valid;                      // pixel_dma_avalon_control_slave_agent:rp_valid -> router_002:sink_valid
	wire  [124:0] pixel_dma_avalon_control_slave_agent_rp_data;                       // pixel_dma_avalon_control_slave_agent:rp_data -> router_002:sink_data
	wire          pixel_dma_avalon_control_slave_agent_rp_ready;                      // router_002:sink_ready -> pixel_dma_avalon_control_slave_agent:rp_ready
	wire          pixel_dma_avalon_control_slave_agent_rp_startofpacket;              // pixel_dma_avalon_control_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          pixel_dma_avalon_control_slave_agent_rp_endofpacket;                // pixel_dma_avalon_control_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire  [124:0] router_002_src_data;                                                // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire    [5:0] router_002_src_channel;                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          instr_fifo_in_agent_rp_valid;                                       // instr_fifo_in_agent:rp_valid -> router_003:sink_valid
	wire  [124:0] instr_fifo_in_agent_rp_data;                                        // instr_fifo_in_agent:rp_data -> router_003:sink_data
	wire          instr_fifo_in_agent_rp_ready;                                       // router_003:sink_ready -> instr_fifo_in_agent:rp_ready
	wire          instr_fifo_in_agent_rp_startofpacket;                               // instr_fifo_in_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          instr_fifo_in_agent_rp_endofpacket;                                 // instr_fifo_in_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [124:0] router_003_src_data;                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [5:0] router_003_src_channel;                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          instr_fifo_in_csr_agent_rp_valid;                                   // instr_fifo_in_csr_agent:rp_valid -> router_004:sink_valid
	wire  [124:0] instr_fifo_in_csr_agent_rp_data;                                    // instr_fifo_in_csr_agent:rp_data -> router_004:sink_data
	wire          instr_fifo_in_csr_agent_rp_ready;                                   // router_004:sink_ready -> instr_fifo_in_csr_agent:rp_ready
	wire          instr_fifo_in_csr_agent_rp_startofpacket;                           // instr_fifo_in_csr_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          instr_fifo_in_csr_agent_rp_endofpacket;                             // instr_fifo_in_csr_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [124:0] router_004_src_data;                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [5:0] router_004_src_channel;                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          vert_processing_fifo_out_csr_agent_rp_valid;                        // vert_processing_fifo_out_csr_agent:rp_valid -> router_005:sink_valid
	wire  [124:0] vert_processing_fifo_out_csr_agent_rp_data;                         // vert_processing_fifo_out_csr_agent:rp_data -> router_005:sink_data
	wire          vert_processing_fifo_out_csr_agent_rp_ready;                        // router_005:sink_ready -> vert_processing_fifo_out_csr_agent:rp_ready
	wire          vert_processing_fifo_out_csr_agent_rp_startofpacket;                // vert_processing_fifo_out_csr_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          vert_processing_fifo_out_csr_agent_rp_endofpacket;                  // vert_processing_fifo_out_csr_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                               // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [124:0] router_005_src_data;                                                // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                               // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [5:0] router_005_src_channel;                                             // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                       // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                         // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          prim_assembly_fifo_out_csr_agent_rp_valid;                          // prim_assembly_fifo_out_csr_agent:rp_valid -> router_006:sink_valid
	wire  [124:0] prim_assembly_fifo_out_csr_agent_rp_data;                           // prim_assembly_fifo_out_csr_agent:rp_data -> router_006:sink_data
	wire          prim_assembly_fifo_out_csr_agent_rp_ready;                          // router_006:sink_ready -> prim_assembly_fifo_out_csr_agent:rp_ready
	wire          prim_assembly_fifo_out_csr_agent_rp_startofpacket;                  // prim_assembly_fifo_out_csr_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          prim_assembly_fifo_out_csr_agent_rp_endofpacket;                    // prim_assembly_fifo_out_csr_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                               // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [124:0] router_006_src_data;                                                // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                               // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [5:0] router_006_src_channel;                                             // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                       // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                         // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          raster_fifo_out_csr_agent_rp_valid;                                 // raster_fifo_out_csr_agent:rp_valid -> router_007:sink_valid
	wire  [124:0] raster_fifo_out_csr_agent_rp_data;                                  // raster_fifo_out_csr_agent:rp_data -> router_007:sink_data
	wire          raster_fifo_out_csr_agent_rp_ready;                                 // router_007:sink_ready -> raster_fifo_out_csr_agent:rp_ready
	wire          raster_fifo_out_csr_agent_rp_startofpacket;                         // raster_fifo_out_csr_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          raster_fifo_out_csr_agent_rp_endofpacket;                           // raster_fifo_out_csr_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [124:0] router_007_src_data;                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [5:0] router_007_src_channel;                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_src_valid;                                                   // router:src_valid -> hps_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [124:0] router_src_data;                                                    // router:src_data -> hps_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                   // hps_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [5:0] router_src_channel;                                                 // router:src_channel -> hps_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                           // router:src_startofpacket -> hps_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                             // router:src_endofpacket -> hps_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [124:0] hps_h2f_axi_master_wr_limiter_cmd_src_data;                         // hps_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_h2f_axi_master_wr_limiter_cmd_src_ready;                        // cmd_demux:sink_ready -> hps_h2f_axi_master_wr_limiter:cmd_src_ready
	wire    [5:0] hps_h2f_axi_master_wr_limiter_cmd_src_channel;                      // hps_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket;                // hps_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket;                  // hps_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> hps_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [124:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> hps_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                  // hps_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [5:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> hps_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> hps_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> hps_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_h2f_axi_master_wr_limiter_rsp_src_valid;                        // hps_h2f_axi_master_wr_limiter:rsp_src_valid -> hps_h2f_axi_master_agent:write_rp_valid
	wire  [124:0] hps_h2f_axi_master_wr_limiter_rsp_src_data;                         // hps_h2f_axi_master_wr_limiter:rsp_src_data -> hps_h2f_axi_master_agent:write_rp_data
	wire          hps_h2f_axi_master_wr_limiter_rsp_src_ready;                        // hps_h2f_axi_master_agent:write_rp_ready -> hps_h2f_axi_master_wr_limiter:rsp_src_ready
	wire    [5:0] hps_h2f_axi_master_wr_limiter_rsp_src_channel;                      // hps_h2f_axi_master_wr_limiter:rsp_src_channel -> hps_h2f_axi_master_agent:write_rp_channel
	wire          hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket;                // hps_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> hps_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket;                  // hps_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> hps_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                               // router_001:src_valid -> hps_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [124:0] router_001_src_data;                                                // router_001:src_data -> hps_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                               // hps_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [5:0] router_001_src_channel;                                             // router_001:src_channel -> hps_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                       // router_001:src_startofpacket -> hps_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                         // router_001:src_endofpacket -> hps_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [124:0] hps_h2f_axi_master_rd_limiter_cmd_src_data;                         // hps_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_h2f_axi_master_rd_limiter_cmd_src_ready;                        // cmd_demux_001:sink_ready -> hps_h2f_axi_master_rd_limiter:cmd_src_ready
	wire    [5:0] hps_h2f_axi_master_rd_limiter_cmd_src_channel;                      // hps_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket;                // hps_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket;                  // hps_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                              // rsp_mux_001:src_valid -> hps_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [124:0] rsp_mux_001_src_data;                                               // rsp_mux_001:src_data -> hps_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                              // hps_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [5:0] rsp_mux_001_src_channel;                                            // rsp_mux_001:src_channel -> hps_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                      // rsp_mux_001:src_startofpacket -> hps_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                        // rsp_mux_001:src_endofpacket -> hps_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_h2f_axi_master_rd_limiter_rsp_src_valid;                        // hps_h2f_axi_master_rd_limiter:rsp_src_valid -> hps_h2f_axi_master_agent:read_rp_valid
	wire  [124:0] hps_h2f_axi_master_rd_limiter_rsp_src_data;                         // hps_h2f_axi_master_rd_limiter:rsp_src_data -> hps_h2f_axi_master_agent:read_rp_data
	wire          hps_h2f_axi_master_rd_limiter_rsp_src_ready;                        // hps_h2f_axi_master_agent:read_rp_ready -> hps_h2f_axi_master_rd_limiter:rsp_src_ready
	wire    [5:0] hps_h2f_axi_master_rd_limiter_rsp_src_channel;                      // hps_h2f_axi_master_rd_limiter:rsp_src_channel -> hps_h2f_axi_master_agent:read_rp_channel
	wire          hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket;                // hps_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> hps_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket;                  // hps_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> hps_h2f_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> pixel_dma_avalon_control_slave_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> pixel_dma_avalon_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                  // pixel_dma_avalon_control_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [5:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> pixel_dma_avalon_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> pixel_dma_avalon_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> pixel_dma_avalon_control_slave_burst_adapter:sink0_endofpacket
	wire          pixel_dma_avalon_control_slave_burst_adapter_source0_valid;         // pixel_dma_avalon_control_slave_burst_adapter:source0_valid -> pixel_dma_avalon_control_slave_agent:cp_valid
	wire  [124:0] pixel_dma_avalon_control_slave_burst_adapter_source0_data;          // pixel_dma_avalon_control_slave_burst_adapter:source0_data -> pixel_dma_avalon_control_slave_agent:cp_data
	wire          pixel_dma_avalon_control_slave_burst_adapter_source0_ready;         // pixel_dma_avalon_control_slave_agent:cp_ready -> pixel_dma_avalon_control_slave_burst_adapter:source0_ready
	wire    [5:0] pixel_dma_avalon_control_slave_burst_adapter_source0_channel;       // pixel_dma_avalon_control_slave_burst_adapter:source0_channel -> pixel_dma_avalon_control_slave_agent:cp_channel
	wire          pixel_dma_avalon_control_slave_burst_adapter_source0_startofpacket; // pixel_dma_avalon_control_slave_burst_adapter:source0_startofpacket -> pixel_dma_avalon_control_slave_agent:cp_startofpacket
	wire          pixel_dma_avalon_control_slave_burst_adapter_source0_endofpacket;   // pixel_dma_avalon_control_slave_burst_adapter:source0_endofpacket -> pixel_dma_avalon_control_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                              // cmd_mux_001:src_valid -> instr_fifo_in_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_001_src_data;                                               // cmd_mux_001:src_data -> instr_fifo_in_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                              // instr_fifo_in_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [5:0] cmd_mux_001_src_channel;                                            // cmd_mux_001:src_channel -> instr_fifo_in_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                      // cmd_mux_001:src_startofpacket -> instr_fifo_in_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                        // cmd_mux_001:src_endofpacket -> instr_fifo_in_burst_adapter:sink0_endofpacket
	wire          instr_fifo_in_burst_adapter_source0_valid;                          // instr_fifo_in_burst_adapter:source0_valid -> instr_fifo_in_agent:cp_valid
	wire  [124:0] instr_fifo_in_burst_adapter_source0_data;                           // instr_fifo_in_burst_adapter:source0_data -> instr_fifo_in_agent:cp_data
	wire          instr_fifo_in_burst_adapter_source0_ready;                          // instr_fifo_in_agent:cp_ready -> instr_fifo_in_burst_adapter:source0_ready
	wire    [5:0] instr_fifo_in_burst_adapter_source0_channel;                        // instr_fifo_in_burst_adapter:source0_channel -> instr_fifo_in_agent:cp_channel
	wire          instr_fifo_in_burst_adapter_source0_startofpacket;                  // instr_fifo_in_burst_adapter:source0_startofpacket -> instr_fifo_in_agent:cp_startofpacket
	wire          instr_fifo_in_burst_adapter_source0_endofpacket;                    // instr_fifo_in_burst_adapter:source0_endofpacket -> instr_fifo_in_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                              // cmd_mux_002:src_valid -> instr_fifo_in_csr_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_002_src_data;                                               // cmd_mux_002:src_data -> instr_fifo_in_csr_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                              // instr_fifo_in_csr_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [5:0] cmd_mux_002_src_channel;                                            // cmd_mux_002:src_channel -> instr_fifo_in_csr_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                      // cmd_mux_002:src_startofpacket -> instr_fifo_in_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                        // cmd_mux_002:src_endofpacket -> instr_fifo_in_csr_burst_adapter:sink0_endofpacket
	wire          instr_fifo_in_csr_burst_adapter_source0_valid;                      // instr_fifo_in_csr_burst_adapter:source0_valid -> instr_fifo_in_csr_agent:cp_valid
	wire  [124:0] instr_fifo_in_csr_burst_adapter_source0_data;                       // instr_fifo_in_csr_burst_adapter:source0_data -> instr_fifo_in_csr_agent:cp_data
	wire          instr_fifo_in_csr_burst_adapter_source0_ready;                      // instr_fifo_in_csr_agent:cp_ready -> instr_fifo_in_csr_burst_adapter:source0_ready
	wire    [5:0] instr_fifo_in_csr_burst_adapter_source0_channel;                    // instr_fifo_in_csr_burst_adapter:source0_channel -> instr_fifo_in_csr_agent:cp_channel
	wire          instr_fifo_in_csr_burst_adapter_source0_startofpacket;              // instr_fifo_in_csr_burst_adapter:source0_startofpacket -> instr_fifo_in_csr_agent:cp_startofpacket
	wire          instr_fifo_in_csr_burst_adapter_source0_endofpacket;                // instr_fifo_in_csr_burst_adapter:source0_endofpacket -> instr_fifo_in_csr_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                              // cmd_mux_003:src_valid -> vert_processing_fifo_out_csr_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_003_src_data;                                               // cmd_mux_003:src_data -> vert_processing_fifo_out_csr_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                              // vert_processing_fifo_out_csr_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [5:0] cmd_mux_003_src_channel;                                            // cmd_mux_003:src_channel -> vert_processing_fifo_out_csr_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                      // cmd_mux_003:src_startofpacket -> vert_processing_fifo_out_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                        // cmd_mux_003:src_endofpacket -> vert_processing_fifo_out_csr_burst_adapter:sink0_endofpacket
	wire          vert_processing_fifo_out_csr_burst_adapter_source0_valid;           // vert_processing_fifo_out_csr_burst_adapter:source0_valid -> vert_processing_fifo_out_csr_agent:cp_valid
	wire  [124:0] vert_processing_fifo_out_csr_burst_adapter_source0_data;            // vert_processing_fifo_out_csr_burst_adapter:source0_data -> vert_processing_fifo_out_csr_agent:cp_data
	wire          vert_processing_fifo_out_csr_burst_adapter_source0_ready;           // vert_processing_fifo_out_csr_agent:cp_ready -> vert_processing_fifo_out_csr_burst_adapter:source0_ready
	wire    [5:0] vert_processing_fifo_out_csr_burst_adapter_source0_channel;         // vert_processing_fifo_out_csr_burst_adapter:source0_channel -> vert_processing_fifo_out_csr_agent:cp_channel
	wire          vert_processing_fifo_out_csr_burst_adapter_source0_startofpacket;   // vert_processing_fifo_out_csr_burst_adapter:source0_startofpacket -> vert_processing_fifo_out_csr_agent:cp_startofpacket
	wire          vert_processing_fifo_out_csr_burst_adapter_source0_endofpacket;     // vert_processing_fifo_out_csr_burst_adapter:source0_endofpacket -> vert_processing_fifo_out_csr_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                              // cmd_mux_004:src_valid -> prim_assembly_fifo_out_csr_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_004_src_data;                                               // cmd_mux_004:src_data -> prim_assembly_fifo_out_csr_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                              // prim_assembly_fifo_out_csr_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [5:0] cmd_mux_004_src_channel;                                            // cmd_mux_004:src_channel -> prim_assembly_fifo_out_csr_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                      // cmd_mux_004:src_startofpacket -> prim_assembly_fifo_out_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                        // cmd_mux_004:src_endofpacket -> prim_assembly_fifo_out_csr_burst_adapter:sink0_endofpacket
	wire          prim_assembly_fifo_out_csr_burst_adapter_source0_valid;             // prim_assembly_fifo_out_csr_burst_adapter:source0_valid -> prim_assembly_fifo_out_csr_agent:cp_valid
	wire  [124:0] prim_assembly_fifo_out_csr_burst_adapter_source0_data;              // prim_assembly_fifo_out_csr_burst_adapter:source0_data -> prim_assembly_fifo_out_csr_agent:cp_data
	wire          prim_assembly_fifo_out_csr_burst_adapter_source0_ready;             // prim_assembly_fifo_out_csr_agent:cp_ready -> prim_assembly_fifo_out_csr_burst_adapter:source0_ready
	wire    [5:0] prim_assembly_fifo_out_csr_burst_adapter_source0_channel;           // prim_assembly_fifo_out_csr_burst_adapter:source0_channel -> prim_assembly_fifo_out_csr_agent:cp_channel
	wire          prim_assembly_fifo_out_csr_burst_adapter_source0_startofpacket;     // prim_assembly_fifo_out_csr_burst_adapter:source0_startofpacket -> prim_assembly_fifo_out_csr_agent:cp_startofpacket
	wire          prim_assembly_fifo_out_csr_burst_adapter_source0_endofpacket;       // prim_assembly_fifo_out_csr_burst_adapter:source0_endofpacket -> prim_assembly_fifo_out_csr_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                              // cmd_mux_005:src_valid -> raster_fifo_out_csr_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_005_src_data;                                               // cmd_mux_005:src_data -> raster_fifo_out_csr_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                              // raster_fifo_out_csr_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire    [5:0] cmd_mux_005_src_channel;                                            // cmd_mux_005:src_channel -> raster_fifo_out_csr_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                      // cmd_mux_005:src_startofpacket -> raster_fifo_out_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                        // cmd_mux_005:src_endofpacket -> raster_fifo_out_csr_burst_adapter:sink0_endofpacket
	wire          raster_fifo_out_csr_burst_adapter_source0_valid;                    // raster_fifo_out_csr_burst_adapter:source0_valid -> raster_fifo_out_csr_agent:cp_valid
	wire  [124:0] raster_fifo_out_csr_burst_adapter_source0_data;                     // raster_fifo_out_csr_burst_adapter:source0_data -> raster_fifo_out_csr_agent:cp_data
	wire          raster_fifo_out_csr_burst_adapter_source0_ready;                    // raster_fifo_out_csr_agent:cp_ready -> raster_fifo_out_csr_burst_adapter:source0_ready
	wire    [5:0] raster_fifo_out_csr_burst_adapter_source0_channel;                  // raster_fifo_out_csr_burst_adapter:source0_channel -> raster_fifo_out_csr_agent:cp_channel
	wire          raster_fifo_out_csr_burst_adapter_source0_startofpacket;            // raster_fifo_out_csr_burst_adapter:source0_startofpacket -> raster_fifo_out_csr_agent:cp_startofpacket
	wire          raster_fifo_out_csr_burst_adapter_source0_endofpacket;              // raster_fifo_out_csr_burst_adapter:source0_endofpacket -> raster_fifo_out_csr_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [124:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [5:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [124:0] cmd_demux_src1_data;                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [5:0] cmd_demux_src1_channel;                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [124:0] cmd_demux_src2_data;                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [5:0] cmd_demux_src2_channel;                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [124:0] cmd_demux_src3_data;                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [5:0] cmd_demux_src3_channel;                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [124:0] cmd_demux_src4_data;                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [5:0] cmd_demux_src4_channel;                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [124:0] cmd_demux_src5_data;                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [5:0] cmd_demux_src5_channel;                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                           // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [124:0] cmd_demux_001_src0_data;                                            // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                           // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [5:0] cmd_demux_001_src0_channel;                                         // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                   // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                     // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                           // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [124:0] cmd_demux_001_src1_data;                                            // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                           // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [5:0] cmd_demux_001_src1_channel;                                         // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                           // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [124:0] cmd_demux_001_src2_data;                                            // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                           // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [5:0] cmd_demux_001_src2_channel;                                         // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                   // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                     // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                           // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [124:0] cmd_demux_001_src3_data;                                            // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                           // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [5:0] cmd_demux_001_src3_channel;                                         // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                   // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                     // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                           // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [124:0] cmd_demux_001_src4_data;                                            // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                           // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire    [5:0] cmd_demux_001_src4_channel;                                         // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                   // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                     // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                           // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [124:0] cmd_demux_001_src5_data;                                            // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                           // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire    [5:0] cmd_demux_001_src5_channel;                                         // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                   // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                     // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [124:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [5:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                               // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [124:0] rsp_demux_src1_data;                                                // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                               // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [5:0] rsp_demux_src1_channel;                                             // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                       // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                         // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [124:0] rsp_demux_001_src0_data;                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [5:0] rsp_demux_001_src0_channel;                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                           // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [124:0] rsp_demux_001_src1_data;                                            // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                           // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [5:0] rsp_demux_001_src1_channel;                                         // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                   // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                     // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [124:0] rsp_demux_002_src0_data;                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [5:0] rsp_demux_002_src0_channel;                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                           // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [124:0] rsp_demux_002_src1_data;                                            // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                           // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [5:0] rsp_demux_002_src1_channel;                                         // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                   // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                     // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [124:0] rsp_demux_003_src0_data;                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [5:0] rsp_demux_003_src0_channel;                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                           // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [124:0] rsp_demux_003_src1_data;                                            // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                           // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [5:0] rsp_demux_003_src1_channel;                                         // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                   // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                     // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [124:0] rsp_demux_004_src0_data;                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [5:0] rsp_demux_004_src0_channel;                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                           // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [124:0] rsp_demux_004_src1_data;                                            // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                           // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [5:0] rsp_demux_004_src1_channel;                                         // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                   // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                     // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [124:0] rsp_demux_005_src0_data;                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [5:0] rsp_demux_005_src0_channel;                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                           // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [124:0] rsp_demux_005_src1_data;                                            // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                           // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire    [5:0] rsp_demux_005_src1_channel;                                         // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                   // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                     // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire    [5:0] hps_h2f_axi_master_wr_limiter_cmd_valid_data;                       // hps_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [5:0] hps_h2f_axi_master_rd_limiter_cmd_valid_data;                       // hps_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          pixel_dma_avalon_control_slave_agent_rdata_fifo_out_valid;          // pixel_dma_avalon_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] pixel_dma_avalon_control_slave_agent_rdata_fifo_out_data;           // pixel_dma_avalon_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          pixel_dma_avalon_control_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> pixel_dma_avalon_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                      // avalon_st_adapter:out_0_valid -> pixel_dma_avalon_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                       // avalon_st_adapter:out_0_data -> pixel_dma_avalon_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                      // pixel_dma_avalon_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                      // avalon_st_adapter:out_0_error -> pixel_dma_avalon_control_slave_agent:rdata_fifo_sink_error
	wire          instr_fifo_in_agent_rdata_fifo_out_valid;                           // instr_fifo_in_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] instr_fifo_in_agent_rdata_fifo_out_data;                            // instr_fifo_in_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          instr_fifo_in_agent_rdata_fifo_out_ready;                           // avalon_st_adapter_001:in_0_ready -> instr_fifo_in_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                  // avalon_st_adapter_001:out_0_valid -> instr_fifo_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                   // avalon_st_adapter_001:out_0_data -> instr_fifo_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                  // instr_fifo_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                  // avalon_st_adapter_001:out_0_error -> instr_fifo_in_agent:rdata_fifo_sink_error
	wire          instr_fifo_in_csr_agent_rdata_fifo_out_valid;                       // instr_fifo_in_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] instr_fifo_in_csr_agent_rdata_fifo_out_data;                        // instr_fifo_in_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          instr_fifo_in_csr_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_002:in_0_ready -> instr_fifo_in_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                  // avalon_st_adapter_002:out_0_valid -> instr_fifo_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                   // avalon_st_adapter_002:out_0_data -> instr_fifo_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                  // instr_fifo_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                  // avalon_st_adapter_002:out_0_error -> instr_fifo_in_csr_agent:rdata_fifo_sink_error
	wire          vert_processing_fifo_out_csr_agent_rdata_fifo_out_valid;            // vert_processing_fifo_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] vert_processing_fifo_out_csr_agent_rdata_fifo_out_data;             // vert_processing_fifo_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          vert_processing_fifo_out_csr_agent_rdata_fifo_out_ready;            // avalon_st_adapter_003:in_0_ready -> vert_processing_fifo_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                  // avalon_st_adapter_003:out_0_valid -> vert_processing_fifo_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                   // avalon_st_adapter_003:out_0_data -> vert_processing_fifo_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                  // vert_processing_fifo_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                  // avalon_st_adapter_003:out_0_error -> vert_processing_fifo_out_csr_agent:rdata_fifo_sink_error
	wire          prim_assembly_fifo_out_csr_agent_rdata_fifo_out_valid;              // prim_assembly_fifo_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] prim_assembly_fifo_out_csr_agent_rdata_fifo_out_data;               // prim_assembly_fifo_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          prim_assembly_fifo_out_csr_agent_rdata_fifo_out_ready;              // avalon_st_adapter_004:in_0_ready -> prim_assembly_fifo_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                  // avalon_st_adapter_004:out_0_valid -> prim_assembly_fifo_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                   // avalon_st_adapter_004:out_0_data -> prim_assembly_fifo_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                  // prim_assembly_fifo_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                  // avalon_st_adapter_004:out_0_error -> prim_assembly_fifo_out_csr_agent:rdata_fifo_sink_error
	wire          raster_fifo_out_csr_agent_rdata_fifo_out_valid;                     // raster_fifo_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] raster_fifo_out_csr_agent_rdata_fifo_out_data;                      // raster_fifo_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          raster_fifo_out_csr_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_005:in_0_ready -> raster_fifo_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                  // avalon_st_adapter_005:out_0_valid -> raster_fifo_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                   // avalon_st_adapter_005:out_0_data -> raster_fifo_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                  // raster_fifo_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                  // avalon_st_adapter_005:out_0_error -> raster_fifo_out_csr_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_dma_avalon_control_slave_translator (
		.clk                    (pll_outclk0_clk),                                       //                      clk.clk
		.reset                  (pixel_dma_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (pixel_dma_avalon_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_dma_avalon_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_dma_avalon_control_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_dma_avalon_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_dma_avalon_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_dma_avalon_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_dma_avalon_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_dma_avalon_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_dma_avalon_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_dma_avalon_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_dma_avalon_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (pixel_dma_avalon_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (pixel_dma_avalon_control_slave_write),                  //                         .write
		.av_read                (pixel_dma_avalon_control_slave_read),                   //                         .read
		.av_readdata            (pixel_dma_avalon_control_slave_readdata),               //                         .readdata
		.av_writedata           (pixel_dma_avalon_control_slave_writedata),              //                         .writedata
		.av_byteenable          (pixel_dma_avalon_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) instr_fifo_in_translator (
		.clk                    (pll_outclk0_clk),                             //                      clk.clk
		.reset                  (pixel_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (instr_fifo_in_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (instr_fifo_in_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (instr_fifo_in_agent_m0_read),                 //                         .read
		.uav_write              (instr_fifo_in_agent_m0_write),                //                         .write
		.uav_waitrequest        (instr_fifo_in_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (instr_fifo_in_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (instr_fifo_in_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (instr_fifo_in_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (instr_fifo_in_agent_m0_writedata),            //                         .writedata
		.uav_lock               (instr_fifo_in_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (instr_fifo_in_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (instr_fifo_in_address),                       //      avalon_anti_slave_0.address
		.av_write               (instr_fifo_in_write),                         //                         .write
		.av_writedata           (instr_fifo_in_writedata),                     //                         .writedata
		.av_waitrequest         (instr_fifo_in_waitrequest),                   //                         .waitrequest
		.av_read                (),                                            //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),        //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) instr_fifo_in_csr_translator (
		.clk                    (pll_outclk0_clk),                             //                      clk.clk
		.reset                  (pixel_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (instr_fifo_in_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (instr_fifo_in_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (instr_fifo_in_csr_agent_m0_read),             //                         .read
		.uav_write              (instr_fifo_in_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (instr_fifo_in_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (instr_fifo_in_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (instr_fifo_in_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (instr_fifo_in_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (instr_fifo_in_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (instr_fifo_in_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (instr_fifo_in_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (instr_fifo_in_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (instr_fifo_in_csr_write),                     //                         .write
		.av_read                (instr_fifo_in_csr_read),                      //                         .read
		.av_readdata            (instr_fifo_in_csr_readdata),                  //                         .readdata
		.av_writedata           (instr_fifo_in_csr_writedata),                 //                         .writedata
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vert_processing_fifo_out_csr_translator (
		.clk                    (pll_outclk0_clk),                                     //                      clk.clk
		.reset                  (pixel_dma_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (vert_processing_fifo_out_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vert_processing_fifo_out_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vert_processing_fifo_out_csr_agent_m0_read),          //                         .read
		.uav_write              (vert_processing_fifo_out_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (vert_processing_fifo_out_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vert_processing_fifo_out_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vert_processing_fifo_out_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vert_processing_fifo_out_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vert_processing_fifo_out_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vert_processing_fifo_out_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vert_processing_fifo_out_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (vert_processing_fifo_out_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (vert_processing_fifo_out_csr_write),                  //                         .write
		.av_read                (vert_processing_fifo_out_csr_read),                   //                         .read
		.av_readdata            (vert_processing_fifo_out_csr_readdata),               //                         .readdata
		.av_writedata           (vert_processing_fifo_out_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) prim_assembly_fifo_out_csr_translator (
		.clk                    (pll_outclk0_clk),                                   //                      clk.clk
		.reset                  (pixel_dma_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (prim_assembly_fifo_out_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (prim_assembly_fifo_out_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (prim_assembly_fifo_out_csr_agent_m0_read),          //                         .read
		.uav_write              (prim_assembly_fifo_out_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (prim_assembly_fifo_out_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (prim_assembly_fifo_out_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (prim_assembly_fifo_out_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (prim_assembly_fifo_out_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (prim_assembly_fifo_out_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (prim_assembly_fifo_out_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (prim_assembly_fifo_out_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (prim_assembly_fifo_out_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (prim_assembly_fifo_out_csr_write),                  //                         .write
		.av_read                (prim_assembly_fifo_out_csr_read),                   //                         .read
		.av_readdata            (prim_assembly_fifo_out_csr_readdata),               //                         .readdata
		.av_writedata           (prim_assembly_fifo_out_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) raster_fifo_out_csr_translator (
		.clk                    (pll_outclk0_clk),                             //                      clk.clk
		.reset                  (pixel_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (raster_fifo_out_csr_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (raster_fifo_out_csr_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (raster_fifo_out_csr_agent_m0_read),           //                         .read
		.uav_write              (raster_fifo_out_csr_agent_m0_write),          //                         .write
		.uav_waitrequest        (raster_fifo_out_csr_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (raster_fifo_out_csr_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (raster_fifo_out_csr_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (raster_fifo_out_csr_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (raster_fifo_out_csr_agent_m0_writedata),      //                         .writedata
		.uav_lock               (raster_fifo_out_csr_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (raster_fifo_out_csr_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (raster_fifo_out_csr_address),                 //      avalon_anti_slave_0.address
		.av_write               (raster_fifo_out_csr_write),                   //                         .write
		.av_read                (raster_fifo_out_csr_read),                    //                         .read
		.av_readdata            (raster_fifo_out_csr_readdata),                //                         .readdata
		.av_writedata           (raster_fifo_out_csr_writedata),               //                         .writedata
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (93),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (71),
		.PKT_TRANS_LOCK            (70),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (101),
		.PKT_QOS_L                 (94),
		.PKT_QOS_H                 (94),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (6),
		.ID                        (0)
	) hps_h2f_axi_master_agent (
		.aclk                   (pll_outclk0_clk),                                     //              clk.clk
		.aresetn                (~pixel_dma_reset_reset_bridge_in_reset_reset),        //        clk_reset.reset_n
		.write_cp_valid         (hps_h2f_axi_master_agent_write_cp_valid),             //         write_cp.valid
		.write_cp_data          (hps_h2f_axi_master_agent_write_cp_data),              //                 .data
		.write_cp_startofpacket (hps_h2f_axi_master_agent_write_cp_startofpacket),     //                 .startofpacket
		.write_cp_endofpacket   (hps_h2f_axi_master_agent_write_cp_endofpacket),       //                 .endofpacket
		.write_cp_ready         (hps_h2f_axi_master_agent_write_cp_ready),             //                 .ready
		.write_rp_valid         (hps_h2f_axi_master_wr_limiter_rsp_src_valid),         //         write_rp.valid
		.write_rp_data          (hps_h2f_axi_master_wr_limiter_rsp_src_data),          //                 .data
		.write_rp_channel       (hps_h2f_axi_master_wr_limiter_rsp_src_channel),       //                 .channel
		.write_rp_startofpacket (hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket), //                 .startofpacket
		.write_rp_endofpacket   (hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.write_rp_ready         (hps_h2f_axi_master_wr_limiter_rsp_src_ready),         //                 .ready
		.read_cp_valid          (hps_h2f_axi_master_agent_read_cp_valid),              //          read_cp.valid
		.read_cp_data           (hps_h2f_axi_master_agent_read_cp_data),               //                 .data
		.read_cp_startofpacket  (hps_h2f_axi_master_agent_read_cp_startofpacket),      //                 .startofpacket
		.read_cp_endofpacket    (hps_h2f_axi_master_agent_read_cp_endofpacket),        //                 .endofpacket
		.read_cp_ready          (hps_h2f_axi_master_agent_read_cp_ready),              //                 .ready
		.read_rp_valid          (hps_h2f_axi_master_rd_limiter_rsp_src_valid),         //          read_rp.valid
		.read_rp_data           (hps_h2f_axi_master_rd_limiter_rsp_src_data),          //                 .data
		.read_rp_channel        (hps_h2f_axi_master_rd_limiter_rsp_src_channel),       //                 .channel
		.read_rp_startofpacket  (hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket), //                 .startofpacket
		.read_rp_endofpacket    (hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.read_rp_ready          (hps_h2f_axi_master_rd_limiter_rsp_src_ready),         //                 .ready
		.awid                   (hps_h2f_axi_master_awid),                             // altera_axi_slave.awid
		.awaddr                 (hps_h2f_axi_master_awaddr),                           //                 .awaddr
		.awlen                  (hps_h2f_axi_master_awlen),                            //                 .awlen
		.awsize                 (hps_h2f_axi_master_awsize),                           //                 .awsize
		.awburst                (hps_h2f_axi_master_awburst),                          //                 .awburst
		.awlock                 (hps_h2f_axi_master_awlock),                           //                 .awlock
		.awcache                (hps_h2f_axi_master_awcache),                          //                 .awcache
		.awprot                 (hps_h2f_axi_master_awprot),                           //                 .awprot
		.awvalid                (hps_h2f_axi_master_awvalid),                          //                 .awvalid
		.awready                (hps_h2f_axi_master_awready),                          //                 .awready
		.wid                    (hps_h2f_axi_master_wid),                              //                 .wid
		.wdata                  (hps_h2f_axi_master_wdata),                            //                 .wdata
		.wstrb                  (hps_h2f_axi_master_wstrb),                            //                 .wstrb
		.wlast                  (hps_h2f_axi_master_wlast),                            //                 .wlast
		.wvalid                 (hps_h2f_axi_master_wvalid),                           //                 .wvalid
		.wready                 (hps_h2f_axi_master_wready),                           //                 .wready
		.bid                    (hps_h2f_axi_master_bid),                              //                 .bid
		.bresp                  (hps_h2f_axi_master_bresp),                            //                 .bresp
		.bvalid                 (hps_h2f_axi_master_bvalid),                           //                 .bvalid
		.bready                 (hps_h2f_axi_master_bready),                           //                 .bready
		.arid                   (hps_h2f_axi_master_arid),                             //                 .arid
		.araddr                 (hps_h2f_axi_master_araddr),                           //                 .araddr
		.arlen                  (hps_h2f_axi_master_arlen),                            //                 .arlen
		.arsize                 (hps_h2f_axi_master_arsize),                           //                 .arsize
		.arburst                (hps_h2f_axi_master_arburst),                          //                 .arburst
		.arlock                 (hps_h2f_axi_master_arlock),                           //                 .arlock
		.arcache                (hps_h2f_axi_master_arcache),                          //                 .arcache
		.arprot                 (hps_h2f_axi_master_arprot),                           //                 .arprot
		.arvalid                (hps_h2f_axi_master_arvalid),                          //                 .arvalid
		.arready                (hps_h2f_axi_master_arready),                          //                 .arready
		.rid                    (hps_h2f_axi_master_rid),                              //                 .rid
		.rdata                  (hps_h2f_axi_master_rdata),                            //                 .rdata
		.rresp                  (hps_h2f_axi_master_rresp),                            //                 .rresp
		.rlast                  (hps_h2f_axi_master_rlast),                            //                 .rlast
		.rvalid                 (hps_h2f_axi_master_rvalid),                           //                 .rvalid
		.rready                 (hps_h2f_axi_master_rready),                           //                 .rready
		.awuser                 (1'b0),                                                //      (terminated)
		.aruser                 (1'b0),                                                //      (terminated)
		.awqos                  (4'b0000),                                             //      (terminated)
		.arqos                  (4'b0000),                                             //      (terminated)
		.awregion               (4'b0000),                                             //      (terminated)
		.arregion               (4'b0000),                                             //      (terminated)
		.wuser                  (1'b0),                                                //      (terminated)
		.ruser                  (),                                                    //      (terminated)
		.buser                  ()                                                     //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_dma_avalon_control_slave_agent (
		.clk                     (pll_outclk0_clk),                                                    //             clk.clk
		.reset                   (pixel_dma_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (pixel_dma_avalon_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pixel_dma_avalon_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pixel_dma_avalon_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pixel_dma_avalon_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pixel_dma_avalon_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pixel_dma_avalon_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pixel_dma_avalon_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pixel_dma_avalon_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pixel_dma_avalon_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pixel_dma_avalon_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pixel_dma_avalon_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pixel_dma_avalon_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pixel_dma_avalon_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pixel_dma_avalon_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pixel_dma_avalon_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pixel_dma_avalon_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pixel_dma_avalon_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pixel_dma_avalon_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pixel_dma_avalon_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pixel_dma_avalon_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pixel_dma_avalon_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pixel_dma_avalon_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pixel_dma_avalon_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pixel_dma_avalon_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pixel_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pixel_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pixel_dma_avalon_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pixel_dma_avalon_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pixel_dma_avalon_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pixel_dma_avalon_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pixel_dma_avalon_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pixel_dma_avalon_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (pixel_dma_avalon_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_dma_avalon_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pixel_dma_avalon_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_dma_avalon_control_slave_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                                 //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (pixel_dma_avalon_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_dma_avalon_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_dma_avalon_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_dma_avalon_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_dma_avalon_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_dma_avalon_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_dma_avalon_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_dma_avalon_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_dma_avalon_control_slave_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                                           //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (pixel_dma_avalon_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pixel_dma_avalon_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pixel_dma_avalon_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pixel_dma_avalon_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pixel_dma_avalon_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pixel_dma_avalon_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) instr_fifo_in_agent (
		.clk                     (pll_outclk0_clk),                                   //             clk.clk
		.reset                   (pixel_dma_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (instr_fifo_in_agent_m0_address),                    //              m0.address
		.m0_burstcount           (instr_fifo_in_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (instr_fifo_in_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (instr_fifo_in_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (instr_fifo_in_agent_m0_lock),                       //                .lock
		.m0_readdata             (instr_fifo_in_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (instr_fifo_in_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (instr_fifo_in_agent_m0_read),                       //                .read
		.m0_waitrequest          (instr_fifo_in_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (instr_fifo_in_agent_m0_writedata),                  //                .writedata
		.m0_write                (instr_fifo_in_agent_m0_write),                      //                .write
		.rp_endofpacket          (instr_fifo_in_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (instr_fifo_in_agent_rp_ready),                      //                .ready
		.rp_valid                (instr_fifo_in_agent_rp_valid),                      //                .valid
		.rp_data                 (instr_fifo_in_agent_rp_data),                       //                .data
		.rp_startofpacket        (instr_fifo_in_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (instr_fifo_in_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (instr_fifo_in_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (instr_fifo_in_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (instr_fifo_in_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (instr_fifo_in_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (instr_fifo_in_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (instr_fifo_in_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (instr_fifo_in_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (instr_fifo_in_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (instr_fifo_in_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (instr_fifo_in_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (instr_fifo_in_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (instr_fifo_in_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (instr_fifo_in_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (instr_fifo_in_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (instr_fifo_in_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (instr_fifo_in_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (instr_fifo_in_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (instr_fifo_in_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) instr_fifo_in_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (instr_fifo_in_agent_rf_source_data),             //        in.data
		.in_valid          (instr_fifo_in_agent_rf_source_valid),            //          .valid
		.in_ready          (instr_fifo_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (instr_fifo_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (instr_fifo_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (instr_fifo_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (instr_fifo_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (instr_fifo_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (instr_fifo_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (instr_fifo_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) instr_fifo_in_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                             //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (instr_fifo_in_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (instr_fifo_in_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (instr_fifo_in_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (instr_fifo_in_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (instr_fifo_in_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (instr_fifo_in_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) instr_fifo_in_csr_agent (
		.clk                     (pll_outclk0_clk),                                       //             clk.clk
		.reset                   (pixel_dma_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (instr_fifo_in_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (instr_fifo_in_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (instr_fifo_in_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (instr_fifo_in_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (instr_fifo_in_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (instr_fifo_in_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (instr_fifo_in_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (instr_fifo_in_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (instr_fifo_in_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (instr_fifo_in_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (instr_fifo_in_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (instr_fifo_in_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (instr_fifo_in_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (instr_fifo_in_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (instr_fifo_in_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (instr_fifo_in_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (instr_fifo_in_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (instr_fifo_in_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (instr_fifo_in_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (instr_fifo_in_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (instr_fifo_in_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (instr_fifo_in_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (instr_fifo_in_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (instr_fifo_in_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (instr_fifo_in_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (instr_fifo_in_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (instr_fifo_in_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (instr_fifo_in_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (instr_fifo_in_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (instr_fifo_in_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (instr_fifo_in_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (instr_fifo_in_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (instr_fifo_in_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (instr_fifo_in_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (instr_fifo_in_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) instr_fifo_in_csr_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                    //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (instr_fifo_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (instr_fifo_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (instr_fifo_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (instr_fifo_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (instr_fifo_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (instr_fifo_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (instr_fifo_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (instr_fifo_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (instr_fifo_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (instr_fifo_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) instr_fifo_in_csr_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                              //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (instr_fifo_in_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (instr_fifo_in_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (instr_fifo_in_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (instr_fifo_in_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (instr_fifo_in_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (instr_fifo_in_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vert_processing_fifo_out_csr_agent (
		.clk                     (pll_outclk0_clk),                                                  //             clk.clk
		.reset                   (pixel_dma_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (vert_processing_fifo_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vert_processing_fifo_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vert_processing_fifo_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vert_processing_fifo_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vert_processing_fifo_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (vert_processing_fifo_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vert_processing_fifo_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vert_processing_fifo_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (vert_processing_fifo_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vert_processing_fifo_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (vert_processing_fifo_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (vert_processing_fifo_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vert_processing_fifo_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (vert_processing_fifo_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (vert_processing_fifo_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (vert_processing_fifo_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vert_processing_fifo_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vert_processing_fifo_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vert_processing_fifo_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vert_processing_fifo_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vert_processing_fifo_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vert_processing_fifo_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vert_processing_fifo_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vert_processing_fifo_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vert_processing_fifo_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vert_processing_fifo_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vert_processing_fifo_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vert_processing_fifo_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vert_processing_fifo_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vert_processing_fifo_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vert_processing_fifo_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vert_processing_fifo_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (vert_processing_fifo_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vert_processing_fifo_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vert_processing_fifo_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vert_processing_fifo_out_csr_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                               //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (vert_processing_fifo_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (vert_processing_fifo_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (vert_processing_fifo_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vert_processing_fifo_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vert_processing_fifo_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vert_processing_fifo_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vert_processing_fifo_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vert_processing_fifo_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vert_processing_fifo_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vert_processing_fifo_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vert_processing_fifo_out_csr_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                                         //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (vert_processing_fifo_out_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vert_processing_fifo_out_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vert_processing_fifo_out_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vert_processing_fifo_out_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vert_processing_fifo_out_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vert_processing_fifo_out_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) prim_assembly_fifo_out_csr_agent (
		.clk                     (pll_outclk0_clk),                                                //             clk.clk
		.reset                   (pixel_dma_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (prim_assembly_fifo_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (prim_assembly_fifo_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (prim_assembly_fifo_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (prim_assembly_fifo_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (prim_assembly_fifo_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (prim_assembly_fifo_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (prim_assembly_fifo_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (prim_assembly_fifo_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (prim_assembly_fifo_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (prim_assembly_fifo_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (prim_assembly_fifo_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (prim_assembly_fifo_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (prim_assembly_fifo_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (prim_assembly_fifo_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (prim_assembly_fifo_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (prim_assembly_fifo_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (prim_assembly_fifo_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (prim_assembly_fifo_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (prim_assembly_fifo_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (prim_assembly_fifo_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (prim_assembly_fifo_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (prim_assembly_fifo_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (prim_assembly_fifo_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (prim_assembly_fifo_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (prim_assembly_fifo_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (prim_assembly_fifo_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (prim_assembly_fifo_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (prim_assembly_fifo_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (prim_assembly_fifo_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (prim_assembly_fifo_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (prim_assembly_fifo_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (prim_assembly_fifo_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (prim_assembly_fifo_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (prim_assembly_fifo_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (prim_assembly_fifo_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) prim_assembly_fifo_out_csr_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                             //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (prim_assembly_fifo_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (prim_assembly_fifo_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (prim_assembly_fifo_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (prim_assembly_fifo_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (prim_assembly_fifo_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (prim_assembly_fifo_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (prim_assembly_fifo_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (prim_assembly_fifo_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (prim_assembly_fifo_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (prim_assembly_fifo_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) prim_assembly_fifo_out_csr_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                                       //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (prim_assembly_fifo_out_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (prim_assembly_fifo_out_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (prim_assembly_fifo_out_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (prim_assembly_fifo_out_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (prim_assembly_fifo_out_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (prim_assembly_fifo_out_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) raster_fifo_out_csr_agent (
		.clk                     (pll_outclk0_clk),                                         //             clk.clk
		.reset                   (pixel_dma_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (raster_fifo_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (raster_fifo_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (raster_fifo_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (raster_fifo_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (raster_fifo_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (raster_fifo_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (raster_fifo_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (raster_fifo_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (raster_fifo_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (raster_fifo_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (raster_fifo_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (raster_fifo_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (raster_fifo_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (raster_fifo_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (raster_fifo_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (raster_fifo_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (raster_fifo_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (raster_fifo_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (raster_fifo_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (raster_fifo_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (raster_fifo_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (raster_fifo_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (raster_fifo_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (raster_fifo_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (raster_fifo_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (raster_fifo_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (raster_fifo_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (raster_fifo_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (raster_fifo_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (raster_fifo_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (raster_fifo_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (raster_fifo_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (raster_fifo_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (raster_fifo_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (raster_fifo_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) raster_fifo_out_csr_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                      //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (raster_fifo_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (raster_fifo_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (raster_fifo_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (raster_fifo_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (raster_fifo_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (raster_fifo_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (raster_fifo_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (raster_fifo_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (raster_fifo_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (raster_fifo_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) raster_fifo_out_csr_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                                //       clk.clk
		.reset             (pixel_dma_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (raster_fifo_out_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (raster_fifo_out_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (raster_fifo_out_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (raster_fifo_out_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (raster_fifo_out_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (raster_fifo_out_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	gpu_qsys_mm_interconnect_2_router router (
		.sink_ready         (hps_h2f_axi_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (hps_h2f_axi_master_agent_write_cp_valid),         //          .valid
		.sink_data          (hps_h2f_axi_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (hps_h2f_axi_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_h2f_axi_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                                 //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_router router_001 (
		.sink_ready         (hps_h2f_axi_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (hps_h2f_axi_master_agent_read_cp_valid),         //          .valid
		.sink_data          (hps_h2f_axi_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (hps_h2f_axi_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_h2f_axi_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                                //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_001_src_ready),                           //       src.ready
		.src_valid          (router_001_src_valid),                           //          .valid
		.src_data           (router_001_src_data),                            //          .data
		.src_channel        (router_001_src_channel),                         //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                      //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_router_002 router_002 (
		.sink_ready         (pixel_dma_avalon_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_dma_avalon_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_dma_avalon_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_dma_avalon_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_dma_avalon_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                                       //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_002_src_ready),                                  //       src.ready
		.src_valid          (router_002_src_valid),                                  //          .valid
		.src_data           (router_002_src_data),                                   //          .data
		.src_channel        (router_002_src_channel),                                //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                             //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_router_002 router_003 (
		.sink_ready         (instr_fifo_in_agent_rp_ready),                //      sink.ready
		.sink_valid         (instr_fifo_in_agent_rp_valid),                //          .valid
		.sink_data          (instr_fifo_in_agent_rp_data),                 //          .data
		.sink_startofpacket (instr_fifo_in_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (instr_fifo_in_agent_rp_endofpacket),          //          .endofpacket
		.clk                (pll_outclk0_clk),                             //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                        //       src.ready
		.src_valid          (router_003_src_valid),                        //          .valid
		.src_data           (router_003_src_data),                         //          .data
		.src_channel        (router_003_src_channel),                      //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                   //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_router_002 router_004 (
		.sink_ready         (instr_fifo_in_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (instr_fifo_in_csr_agent_rp_valid),            //          .valid
		.sink_data          (instr_fifo_in_csr_agent_rp_data),             //          .data
		.sink_startofpacket (instr_fifo_in_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (instr_fifo_in_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_outclk0_clk),                             //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                        //       src.ready
		.src_valid          (router_004_src_valid),                        //          .valid
		.src_data           (router_004_src_data),                         //          .data
		.src_channel        (router_004_src_channel),                      //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                   //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_router_002 router_005 (
		.sink_ready         (vert_processing_fifo_out_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (vert_processing_fifo_out_csr_agent_rp_valid),         //          .valid
		.sink_data          (vert_processing_fifo_out_csr_agent_rp_data),          //          .data
		.sink_startofpacket (vert_processing_fifo_out_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vert_processing_fifo_out_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                                     //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_router_002 router_006 (
		.sink_ready         (prim_assembly_fifo_out_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (prim_assembly_fifo_out_csr_agent_rp_valid),         //          .valid
		.sink_data          (prim_assembly_fifo_out_csr_agent_rp_data),          //          .data
		.sink_startofpacket (prim_assembly_fifo_out_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (prim_assembly_fifo_out_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                                   //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_006_src_ready),                              //       src.ready
		.src_valid          (router_006_src_valid),                              //          .valid
		.src_data           (router_006_src_data),                               //          .data
		.src_channel        (router_006_src_channel),                            //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                         //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_router_002 router_007 (
		.sink_ready         (raster_fifo_out_csr_agent_rp_ready),          //      sink.ready
		.sink_valid         (raster_fifo_out_csr_agent_rp_valid),          //          .valid
		.sink_data          (raster_fifo_out_csr_agent_rp_data),           //          .data
		.sink_startofpacket (raster_fifo_out_csr_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (raster_fifo_out_csr_agent_rp_endofpacket),    //          .endofpacket
		.clk                (pll_outclk0_clk),                             //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                        //       src.ready
		.src_valid          (router_007_src_valid),                        //          .valid
		.src_data           (router_007_src_data),                         //          .data
		.src_channel        (router_007_src_channel),                      //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_h2f_axi_master_wr_limiter (
		.clk                    (pll_outclk0_clk),                                     //       clk.clk
		.reset                  (pixel_dma_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                    //          .valid
		.cmd_sink_data          (router_src_data),                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                              //          .endofpacket
		.cmd_src_ready          (hps_h2f_axi_master_wr_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (hps_h2f_axi_master_wr_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (hps_h2f_axi_master_wr_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                             //          .endofpacket
		.rsp_src_ready          (hps_h2f_axi_master_wr_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (hps_h2f_axi_master_wr_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (hps_h2f_axi_master_wr_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (hps_h2f_axi_master_wr_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (hps_h2f_axi_master_wr_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_h2f_axi_master_rd_limiter (
		.clk                    (pll_outclk0_clk),                                     //       clk.clk
		.reset                  (pixel_dma_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (hps_h2f_axi_master_rd_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (hps_h2f_axi_master_rd_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (hps_h2f_axi_master_rd_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (hps_h2f_axi_master_rd_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (hps_h2f_axi_master_rd_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (hps_h2f_axi_master_rd_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (hps_h2f_axi_master_rd_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (hps_h2f_axi_master_rd_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pixel_dma_avalon_control_slave_burst_adapter (
		.clk                   (pll_outclk0_clk),                                                    //       cr0.clk
		.reset                 (pixel_dma_reset_reset_bridge_in_reset_reset),                        // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                  //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                   //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                            //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                  //          .ready
		.source0_valid         (pixel_dma_avalon_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pixel_dma_avalon_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pixel_dma_avalon_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pixel_dma_avalon_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pixel_dma_avalon_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pixel_dma_avalon_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) instr_fifo_in_burst_adapter (
		.clk                   (pll_outclk0_clk),                                   //       cr0.clk
		.reset                 (pixel_dma_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                              //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                             //          .ready
		.source0_valid         (instr_fifo_in_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (instr_fifo_in_burst_adapter_source0_data),          //          .data
		.source0_channel       (instr_fifo_in_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (instr_fifo_in_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (instr_fifo_in_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (instr_fifo_in_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) instr_fifo_in_csr_burst_adapter (
		.clk                   (pll_outclk0_clk),                                       //       cr0.clk
		.reset                 (pixel_dma_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                 //          .ready
		.source0_valid         (instr_fifo_in_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (instr_fifo_in_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (instr_fifo_in_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (instr_fifo_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (instr_fifo_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (instr_fifo_in_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vert_processing_fifo_out_csr_burst_adapter (
		.clk                   (pll_outclk0_clk),                                                  //       cr0.clk
		.reset                 (pixel_dma_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                            //          .ready
		.source0_valid         (vert_processing_fifo_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vert_processing_fifo_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (vert_processing_fifo_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vert_processing_fifo_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vert_processing_fifo_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vert_processing_fifo_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) prim_assembly_fifo_out_csr_burst_adapter (
		.clk                   (pll_outclk0_clk),                                                //       cr0.clk
		.reset                 (pixel_dma_reset_reset_bridge_in_reset_reset),                    // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                          //          .ready
		.source0_valid         (prim_assembly_fifo_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (prim_assembly_fifo_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (prim_assembly_fifo_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (prim_assembly_fifo_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (prim_assembly_fifo_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (prim_assembly_fifo_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) raster_fifo_out_csr_burst_adapter (
		.clk                   (pll_outclk0_clk),                                         //       cr0.clk
		.reset                 (pixel_dma_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                   //          .ready
		.source0_valid         (raster_fifo_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (raster_fifo_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (raster_fifo_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (raster_fifo_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (raster_fifo_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (raster_fifo_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	gpu_qsys_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (pll_outclk0_clk),                                     //        clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (hps_h2f_axi_master_wr_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (hps_h2f_axi_master_wr_limiter_cmd_src_channel),       //           .channel
		.sink_data          (hps_h2f_axi_master_wr_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (hps_h2f_axi_master_wr_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                          //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                //           .valid
		.src4_data          (cmd_demux_src4_data),                                 //           .data
		.src4_channel       (cmd_demux_src4_channel),                              //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                        //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                          //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                //           .valid
		.src5_data          (cmd_demux_src5_data),                                 //           .data
		.src5_channel       (cmd_demux_src5_channel),                              //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                        //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                           //           .endofpacket
	);

	gpu_qsys_mm_interconnect_2_cmd_demux cmd_demux_001 (
		.clk                (pll_outclk0_clk),                                     //        clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (hps_h2f_axi_master_rd_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (hps_h2f_axi_master_rd_limiter_cmd_src_channel),       //           .channel
		.sink_data          (hps_h2f_axi_master_rd_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (hps_h2f_axi_master_rd_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                            //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                            //           .valid
		.src0_data          (cmd_demux_001_src0_data),                             //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                          //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                      //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                            //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                            //           .valid
		.src1_data          (cmd_demux_001_src1_data),                             //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                          //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                      //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                            //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                            //           .valid
		.src2_data          (cmd_demux_001_src2_data),                             //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                          //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                      //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                            //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                            //           .valid
		.src3_data          (cmd_demux_001_src3_data),                             //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                          //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                      //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                            //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                            //           .valid
		.src4_data          (cmd_demux_001_src4_data),                             //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                          //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                      //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                            //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                            //           .valid
		.src5_data          (cmd_demux_001_src5_data),                             //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                          //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket)                       //           .endofpacket
	);

	gpu_qsys_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (pll_outclk0_clk),                             //       clk.clk
		.reset               (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_cmd_mux cmd_mux_001 (
		.clk                 (pll_outclk0_clk),                             //       clk.clk
		.reset               (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                      //          .channel
		.sink0_data          (cmd_demux_src1_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_cmd_mux cmd_mux_002 (
		.clk                 (pll_outclk0_clk),                             //       clk.clk
		.reset               (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                       //          .valid
		.src_data            (cmd_mux_002_src_data),                        //          .data
		.src_channel         (cmd_mux_002_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                      //          .channel
		.sink0_data          (cmd_demux_src2_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_cmd_mux cmd_mux_003 (
		.clk                 (pll_outclk0_clk),                             //       clk.clk
		.reset               (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                       //          .valid
		.src_data            (cmd_mux_003_src_data),                        //          .data
		.src_channel         (cmd_mux_003_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                      //          .channel
		.sink0_data          (cmd_demux_src3_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_cmd_mux cmd_mux_004 (
		.clk                 (pll_outclk0_clk),                             //       clk.clk
		.reset               (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                       //          .valid
		.src_data            (cmd_mux_004_src_data),                        //          .data
		.src_channel         (cmd_mux_004_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                      //          .channel
		.sink0_data          (cmd_demux_src4_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_cmd_mux cmd_mux_005 (
		.clk                 (pll_outclk0_clk),                             //       clk.clk
		.reset               (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                       //          .valid
		.src_data            (cmd_mux_005_src_data),                        //          .data
		.src_channel         (cmd_mux_005_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                      //          .channel
		.sink0_data          (cmd_demux_src5_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (pll_outclk0_clk),                             //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                        //      sink.ready
		.sink_channel       (router_002_src_channel),                      //          .channel
		.sink_data          (router_002_src_data),                         //          .data
		.sink_startofpacket (router_002_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_002_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_src0_data),                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_src1_data),                         //          .data
		.src1_channel       (rsp_demux_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                   //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_rsp_demux rsp_demux_001 (
		.clk                (pll_outclk0_clk),                             //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                        //      sink.ready
		.sink_channel       (router_003_src_channel),                      //          .channel
		.sink_data          (router_003_src_data),                         //          .data
		.sink_startofpacket (router_003_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_003_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_001_src1_data),                     //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_rsp_demux rsp_demux_002 (
		.clk                (pll_outclk0_clk),                             //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                        //      sink.ready
		.sink_channel       (router_004_src_channel),                      //          .channel
		.sink_data          (router_004_src_data),                         //          .data
		.sink_startofpacket (router_004_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_004_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_002_src0_data),                     //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_002_src1_data),                     //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_rsp_demux rsp_demux_003 (
		.clk                (pll_outclk0_clk),                             //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                        //      sink.ready
		.sink_channel       (router_005_src_channel),                      //          .channel
		.sink_data          (router_005_src_data),                         //          .data
		.sink_startofpacket (router_005_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_005_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_003_src0_data),                     //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_003_src1_data),                     //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_rsp_demux rsp_demux_004 (
		.clk                (pll_outclk0_clk),                             //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                        //      sink.ready
		.sink_channel       (router_006_src_channel),                      //          .channel
		.sink_data          (router_006_src_data),                         //          .data
		.sink_startofpacket (router_006_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_006_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_004_src0_data),                     //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_004_src1_data),                     //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_rsp_demux rsp_demux_005 (
		.clk                (pll_outclk0_clk),                             //       clk.clk
		.reset              (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                        //      sink.ready
		.sink_channel       (router_007_src_channel),                      //          .channel
		.sink_data          (router_007_src_data),                         //          .data
		.sink_startofpacket (router_007_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_007_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_005_src0_data),                     //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_005_src1_data),                     //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (pll_outclk0_clk),                             //       clk.clk
		.reset               (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                           //       src.ready
		.src_valid           (rsp_mux_src_valid),                           //          .valid
		.src_data            (rsp_mux_src_data),                            //          .data
		.src_channel         (rsp_mux_src_channel),                         //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                        //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                      //          .channel
		.sink0_data          (rsp_demux_src0_data),                         //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                  //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),              //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                    //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                    //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                  //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                     //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),              //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                    //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                    //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                  //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                     //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),            //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),              //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                    //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                    //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                  //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                     //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),            //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),              //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                    //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                    //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                  //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                     //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),            //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_rsp_mux rsp_mux_001 (
		.clk                 (pll_outclk0_clk),                             //       clk.clk
		.reset               (pixel_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                       //          .valid
		.src_data            (rsp_mux_001_src_data),                        //          .data
		.src_channel         (rsp_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                        //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                      //          .channel
		.sink0_data          (rsp_demux_src1_data),                         //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                  //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                    //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                  //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                     //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),              //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                    //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                    //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                  //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                     //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),              //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                    //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                    //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                  //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                     //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),            //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),              //          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                    //     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                    //          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                  //          .channel
		.sink4_data          (rsp_demux_004_src1_data),                     //          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),            //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket),              //          .endofpacket
		.sink5_ready         (rsp_demux_005_src1_ready),                    //     sink5.ready
		.sink5_valid         (rsp_demux_005_src1_valid),                    //          .valid
		.sink5_channel       (rsp_demux_005_src1_channel),                  //          .channel
		.sink5_data          (rsp_demux_005_src1_data),                     //          .data
		.sink5_startofpacket (rsp_demux_005_src1_startofpacket),            //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src1_endofpacket)               //          .endofpacket
	);

	gpu_qsys_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_outclk0_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (pixel_dma_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (pixel_dma_avalon_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pixel_dma_avalon_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pixel_dma_avalon_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

	gpu_qsys_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (pixel_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (instr_fifo_in_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (instr_fifo_in_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (instr_fifo_in_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)            //         .error
	);

	gpu_qsys_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (pixel_dma_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (instr_fifo_in_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (instr_fifo_in_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (instr_fifo_in_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)             //         .error
	);

	gpu_qsys_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (pixel_dma_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (vert_processing_fifo_out_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vert_processing_fifo_out_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vert_processing_fifo_out_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                        //         .error
	);

	gpu_qsys_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_outclk0_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (pixel_dma_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (prim_assembly_fifo_out_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (prim_assembly_fifo_out_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (prim_assembly_fifo_out_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                      //         .error
	);

	gpu_qsys_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_outclk0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (pixel_dma_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (raster_fifo_out_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (raster_fifo_out_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (raster_fifo_out_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

endmodule
